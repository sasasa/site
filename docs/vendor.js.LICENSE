/* 0 */

/***/

/* WEBPACK VAR INJECTION */

/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */

// For CommonJS and CommonJS-like environments where a proper `window`

// is present, execute the factory and get jQuery.

// For environments that do not have a `window` with a `document`

// (such as Node.js), expose a factory as module.exports.

// This accentuates the need for the creation of a real `window`.

// e.g. var jQuery = require("jquery")(window);

// See ticket #14549 for more info.

// Pass this if window is not defined yet

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1

// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode

// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common

// enough that all such attempts are guarded in a try block.

// Support: Chrome <=57, Firefox <=52

// In some browsers, typeof returns "function" for HTML <object> elements

// (i.e., `typeof document.createElement( "object" ) === "function"`).

// We don't want to classify *any* DOM node as a function.

// Support: Firefox 64+, Edge 18+

// Some browsers don't support the "nonce" property on scripts.

// On the other hand, just using `getAttribute` is not enough as

// the `nonce` attribute is reset to an empty string whenever it

// becomes browsing-context connected.

// See https://github.com/whatwg/html/issues/2369

// See https://html.spec.whatwg.org/#nonce-attributes

// The `node.getAttribute` check was added for the sake of

// `jQuery.globalEval` so that it can fake a nonce-containing node

// via an object.

// Support: Android <=2.3 only (functionish RegExp)

/* global Symbol */

// Defining this global in .eslintrc.json would create a danger of using the global

// unguarded in another place, it seems safer to define global only for this module

// Define a local copy of jQuery

// The jQuery object is actually just the init constructor 'enhanced'

// Need init if jQuery is called (just allow error to be thrown if not included)

// Support: Android <=4.0 only

// Make sure we trim BOM and NBSP

// Support: real iOS 8.2 only (not reproducible in simulator)

// `in` check used to prevent JIT error (gh-2145)

// hasOwn isn't used here due to false negatives

// regarding Nodelist length in IE

// The current version of jQuery being used

// The default length of a jQuery object is 0

// Get the Nth element in the matched element set OR

// Get the whole matched element set as a clean array

// Return all the elements in a clean array

// Return just the one element from the set

// Take an array of elements and push it onto the stack

// (returning the new matched element set)

// Build a new jQuery matched element set

// Add the old object onto the stack (as a reference)

// Return the newly-formed element set

// Execute a callback for every element in the matched set.

// For internal use only.

// Behaves like an Array's method, not like a jQuery method.

// Handle a deep copy situation

// Skip the boolean and the target

// Handle case when target is a string or something (possible in deep copy)

// Extend jQuery itself if only one argument is passed

// Only deal with non-null/undefined values

// Extend the base object

// Prevent Object.prototype pollution

// Prevent never-ending loop

// Recurse if we're merging plain objects or arrays

// Ensure proper type for the source value

// Never move original objects, clone them

// Return the modified object

// Unique for each copy of jQuery on the page

// Assume jQuery is ready without the ready module

// Detect obvious negatives

// Use toString instead of jQuery.type to catch host objects

// Objects with no prototype (e.g., `Object.create( null )`) are plain

// Objects with prototype are plain iff they were constructed by a global Object function

// Evaluates a script in a global context

// results is for internal usage only

// Support: Android <=4.0 only, PhantomJS 1 only

// push.apply(_, arraylike) throws on ancient WebKit

// Go through the array, only saving the items

// that pass the validator function

// arg is for internal usage only

// Go through the array, translating each of the items to their new values

// Go through every key on the object,

// Flatten any nested arrays

// A global GUID counter for objects

// jQuery.support is not used in Core but other projects attach their

// properties to it so it needs to exist.

// Populate the class2type map

/*!
   * Sizzle CSS Selector Engine v2.3.4
   * https://sizzlejs.com/
   *
   * Copyright JS Foundation and other contributors
   * Released under the MIT license
   * https://js.foundation/
   *
   * Date: 2019-04-08
   */

// Local document vars

// Instance-specific data

// Instance methods

// Use a stripped-down indexOf as it's faster than native

// https://jsperf.com/thor-indexof-vs-for/5

// Regular expressions

// http://www.w3.org/TR/css3-selectors/#whitespace

// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier

// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors

// Operator (capture 2)

// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"

// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter

// For use in libraries implementing .is()

// We use this for POS matching in `select`

// Easily-parseable/retrievable ID or TAG or CLASS selectors

// CSS escapes

// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters

// NaN means non-codepoint

// Support: Firefox<24

// Workaround erroneous numeric interpretation of +"0x"

// BMP codepoint

// Supplemental Plane codepoint (surrogate pair)

// CSS string/identifier serialization

// https://drafts.csswg.org/cssom/#common-serializing-idioms

// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER

// Other potentially-special ASCII characters get backslash-escaped

// Used for iframes

// See setDocument()

// Removing the function wrapper causes a "Permission Denied"

// error in IE

// Optimize for push.apply( _, NodeList )

// Support: Android<4.0

// Detect silently failing push.apply

// Leverage slice if possible

// Support: IE<9

// Otherwise append directly

// Can't trust NodeList.length

// nodeType defaults to 9, since context defaults to document

// Return early from calls with invalid selector or context

// Try to shortcut find operations (as opposed to filters) in HTML documents

// If the selector is sufficiently simple, try using a "get*By*" DOM method

// (excepting DocumentFragment context, where the methods don't exist)

// ID selector

// Document context

// Element context

// Support: IE, Opera, Webkit

// TODO: identify versions

// getElementById can match elements by name instead of ID

// Type selector

// Class selector

// Take advantage of querySelectorAll

// Support: IE 8 only

// Exclude object elements

// qSA considers elements outside a scoping root when evaluating child or

// descendant combinators, which is not what we want.

// In such cases, we work around the behavior by prefixing every selector in the

// list with an ID selector referencing the scope context.

// Thanks to Andrew Dupont for this technique.

// Capture the context ID, setting it first if necessary

// Prefix every selector in the list

// Expand context for sibling selectors

// All others

/**
     * Create key-value caches of limited size
     * @returns {function(string, object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */

// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)

// Only keep the most recent entries

/**
     * Mark a function for special use by Sizzle
     * @param {Function} fn The function to mark
     */

/**
     * Support testing using an element
     * @param {Function} fn Passed the created element and returns a boolean result
     */

// Remove from its parent by default

// release memory in IE

/**
     * Adds the same handler for all of the specified attrs
     * @param {String} attrs Pipe-separated list of attributes
     * @param {Function} handler The method that will be applied
     */

/**
     * Checks document order of two siblings
     * @param {Element} a
     * @param {Element} b
     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
     */

// Use IE sourceIndex if available on both nodes

// Check if b follows a

/**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */

/**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */

/**
     * Returns a function to use in pseudos for :enabled/:disabled
     * @param {Boolean} disabled true for :disabled; false for :enabled
     */

// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable

// Only certain elements can match :enabled or :disabled

// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled

// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled

// Check for inherited disabledness on relevant non-disabled elements:

// * listed form-associated elements in a disabled fieldset

//   https://html.spec.whatwg.org/multipage/forms.html#category-listed

//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled

// * option elements in a disabled optgroup

//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled

// All such elements have a "form" property.

// Option elements defer to a parent optgroup if present

// Where there is no isDisabled, check manually

/* jshint -W018 */

// Remaining elements are neither :enabled nor :disabled

/**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */

// Match elements found at the specified indexes

/**
     * Checks a node for validity as a Sizzle context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */

// Expose support vars for convenience

// Add button/input type pseudos

/**
     * Detects XML nodes
     * @param {Element|Object} elem An element or a document
     * @returns {Boolean} True iff elem is a non-HTML XML node
     */

// Support: IE <=8

// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes

// https://bugs.jquery.com/ticket/4833

/**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [doc] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */

// Return early if doc is invalid or already selected

// Update global variables

// Support: IE 9-11, Edge

// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)

// Support: IE 11, Edge

/* Attributes
      ---------------------------------------------------------------------- */

// Support: IE<8

// Verify that getAttribute really returns attributes and not properties

// (excepting IE8 booleans)

/* getElement(s)By*
      ---------------------------------------------------------------------- */

// Check if getElementsByTagName("*") returns only elements

// Support: IE<10

// Check if getElementById returns elements by name

// The broken getElementById methods don't pick up programmatically-set names,

// so use a roundabout getElementsByName test

// ID filter and find

// Support: IE 6 - 7 only

// getElementById is not reliable as a find shortcut

// Verify the id attribute

// Fall back on getElementsByName

// Tag

// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too

// Filter out possible comments

// Class

/* QSA/matchesSelector
      ---------------------------------------------------------------------- */

// QSA and matchesSelector support

// matchesSelector(:active) reports false when true (IE9/Opera 11.5)

// qSa(:focus) reports false when true (Chrome 21)

// We allow this because of a bug in IE8/9 that throws an error

// whenever `document.activeElement` is accessed on an iframe

// So, we allow :focus to pass through QSA all the time to avoid the IE error

// See https://bugs.jquery.com/ticket/13378

// Build QSA regex

// Regex strategy adopted from Diego Perini

// Select is set to empty string on purpose

// This is to test IE's treatment of not explicitly

// setting a boolean content attribute,

// since its presence should be enough

// https://bugs.jquery.com/ticket/12359

// Support: IE8, Opera 11-12.16

// Nothing should be selected when empty strings follow ^= or $= or *=

// The test attribute must be unknown in Opera but "safe" for WinRT

// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

// Support: IE8

// Boolean attributes and "value" are not treated correctly

// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+

// Webkit/Opera - :checked should return selected option elements

// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked

// IE8 throws error here and will not see later tests

// Support: Safari 8+, iOS 8+

// https://bugs.webkit.org/show_bug.cgi?id=136851

// In-page `selector#id sibling-combinator selector` fails

// Support: Windows 8 Native Apps

// The type and name attributes are restricted during .innerHTML assignment

// Enforce case-sensitivity of name attribute

// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)

// Support: IE9-11+

// IE's :disabled selector does not pick up the children of disabled fieldsets

// Opera 10-11 does not throw on post-comma invalid pseudos

// Check to see if it's possible to do matchesSelector

// on a disconnected node (IE 9)

// This should fail with an exception

// Gecko does not error, returns false instead

/* Contains
      ---------------------------------------------------------------------- */

// Element contains another

// Purposefully self-exclusive

// As in, an element does not contain itself

/* Sorting
      ---------------------------------------------------------------------- */

// Document order sorting

// Flag for duplicate removal

// Sort on method existence if only one input has compareDocumentPosition

// Disconnected nodes

// Calculate position if both inputs belong to the same document

// Otherwise we know they are disconnected

// Choose the first element that is related to our preferred document

// Exit early if the nodes are identical

// Parentless nodes are either documents or disconnected

// If the nodes are siblings, we can do a quick check

// Otherwise we need full lists of their ancestors for comparison

// Walk down the tree looking for a discrepancy

// Do a sibling check if the nodes have a common ancestor

// Otherwise nodes in our document sort first

// Set document vars if needed

// IE 9's matchesSelector returns false on disconnected nodes

// As well, disconnected nodes are said to be in a document

// fragment in IE 9

// Don't get fooled by Object.prototype properties (jQuery #13807)

/**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */

// Unless we *know* we can detect duplicates, assume their presence

// Clear input after sorting to release objects

// See https://github.com/jquery/sizzle/pull/225

/**
     * Utility function for retrieving the text value of an array of DOM nodes
     * @param {Array|Element} elem
     */

// Use textContent for elements

// innerText usage removed for consistency of new lines (jQuery #11153)

// Traverse its children

// Do not include comment or processing instruction nodes

// If no nodeType, this is expected to be an array

// Do not traverse comment nodes

// Can be adjusted by the user

// Move the given value to match[3] whether quoted or unquoted

/* matches from matchExpr["CHILD"]
          	1 type (only|nth|...)
          	2 what (child|of-type)
          	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
          	4 xn-component of xn+y argument ([+-]?\d*n|)
          	5 sign of xn-component
          	6 x of xn-component
          	7 sign of y-component
          	8 y of y-component
          */

// nth-* requires argument

// numeric x and y parameters for Expr.filter.CHILD

// remember that false/true cast respectively to 0/1

// Accept quoted arguments as-is

// Get excess from tokenize (recursively)

// advance to the next closing parenthesis

// excess is a negative index

// Shortcut for :nth-*(n)

// :(first|last|only)-(child|of-type)

// Reverse direction for :only-* (if we haven't yet done so)

// non-xml :nth-child(...) stores cache data on `parent`

// Seek `elem` from a previously-cached index

// ...in a gzip-friendly way

// Support: IE <9 only

// Defend against cloned attroperties (jQuery gh-1709)

// Fallback to seeking `elem` from the start

// When found, cache indexes on `parent` and break

// xml :nth-child(...)

// or :nth-last-child(...) or :nth(-last)?-of-type(...)

// Use previously-cached element index if available

// Use the same loop as above to seek `elem` from the start

// Cache the index of each encountered element

// Incorporate the offset, then check against cycle size

// pseudo-class names are case-insensitive

// http://www.w3.org/TR/selectors/#pseudo-classes

// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters

// Remember that setFilters inherits from pseudos

// The user may use createPseudo to indicate that

// arguments are needed to create the filter function

// just as Sizzle does

// But maintain support for old signatures

// Potentially complex pseudos

// Trim the selector passed to compile

// to avoid treating leading and trailing

// spaces as combinators

// Match elements unmatched by `matcher`

// Don't keep the element (issue #299)

// "Whether an element is represented by a :lang() selector

// is based solely on the element's language value

// being equal to the identifier C,

// or beginning with the identifier C immediately followed by "-".

// The matching of C against the element's language value is performed case-insensitively.

// The identifier C does not have to be a valid language name."

// http://www.w3.org/TR/selectors/#lang-pseudo

// lang value must be a valid identifier

// Miscellaneous

// Boolean properties

// In CSS3, :checked should return both checked and selected elements

// Accessing this property makes selected-by-default

// options in Safari work properly

// Contents

// http://www.w3.org/TR/selectors/#empty-pseudo

// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),

//   but not by others (comment: 8; processing instruction: 7; etc.)

// nodeType < 6 works because attributes (2) do not appear as children

// Element/input types

// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"

// Position-in-collection

// Easy API for creating new setFilters

// Check against closest ancestor/preceding element

// Check against all ancestor/preceding elements

// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

// Assign to newCache so results back-propagate to previous elements

// A match means we're done; a fail means we have to keep checking

// Reuse newcache so results back-propagate to previous elements

// Get initial elements from seed or context

// Prefilter to get matcher input, preserving a map for seed-results synchronization

// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,

// ...intermediate processing is necessary

// ...otherwise use results directly

// Find primary matches

// Apply postFilter

// Un-match failing elements by moving them back to matcherIn

// Get the final matcherOut by condensing this intermediate into postFinder contexts

// Restore matcherIn since elem is not yet a final match

// Move matched elements from seed to results to keep them synchronized

// Add elements to results, through postFinder if defined

// The foundational matcher ensures that elements are reachable from top-level context(s)

// Avoid hanging onto element (issue #299)

// Return special upon seeing a positional matcher

// Find the next relative operator (if any) for proper handling

// If the preceding token was a descendant combinator, insert an implicit any-element `*`

// Filters

// Comma and first run

// Don't consume trailing commas as valid

// Combinators

// Cast descendant combinators to space

// Return the length of the invalid excess

// if we're just parsing

// Otherwise, throw an error or return tokens

// Cache the tokens

/* Internal Use Only */

// Generate a function of recursive functions that can be used to check each element

// Cache the compiled function

// Save selector and tokenization

// We must always have either seed elements or outermost context

// Use integer dirruns iff this is the outermost matcher

// Add elements passing elementMatchers directly to results

// Support: IE<9, Safari

// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id

// Track unmatched elements for set filters

// They will have gone through all possible matchers

// Lengthen the array for every element, matched or not

// `i` is now the count of elements visited above, and adding it to `matchedCount`

// makes the latter nonnegative.

// Apply set filters to unmatched elements

// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`

// equals `i`), unless we didn't visit _any_ elements in the above loop because we have

// no element matchers and no seed.

// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that

// case, which will result in a "00" `matchedCount` that differs from `i` but is also

// numerically zero.

// Reintegrate element matches to eliminate the need for sorting

// Discard index placeholder values to get only actual matches

// Add matches to results

// Seedless set matches succeeding multiple successful matchers stipulate sorting

// Override manipulation of globals by nested matchers

/**
     * A low-level selection function that works with Sizzle's compiled
     *  selector functions
     * @param {String|Function} selector A selector or a pre-compiled
     *  selector function built with Sizzle.compile
     * @param {Element} context
     * @param {Array} [results]
     * @param {Array} [seed] A set of elements to match against
     */

// Try to minimize operations if there is only one selector in the list and no seed

// (the latter of which guarantees us context)

// Reduce context if the leading compound selector is an ID

// Precompiled matchers will still verify ancestry, so step up a level

// Fetch a seed set for right-to-left matching

// If seed is empty or no tokens remain, we can return early

// Compile and execute a filtering function if one is not provided

// Provide `match` to avoid retokenization if we modified the selector above

// One-time assignments

// Sort stability

// Support: Chrome 14-35+

// Always assume duplicates if they aren't passed to the comparison function

// Initialize against the default document

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)

// Detached nodes confoundingly follow *each other*

// Should return 1, but returns 4 (following)

// Prevent attribute/property "interpolation"

// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

// Use defaultValue in place of getAttribute("value")

// Use getAttributeNode to fetch booleans when getAttribute lies

// Deprecated

// Implement the identical functionality for filter and not

// Single element

// Arraylike of elements (jQuery, arguments, Array)

// If this is a positional/relative selector, check membership in the returned set

// so $("p:first").is("p:last") won't return true for a doc with two "p".

// Initialize a jQuery object

// A central reference to the root jQuery(document)

// A simple way to check for HTML strings

// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)

// Strict HTML recognition (#11290: must start with <)

// Shortcut simple #id case for speed

// Give the init function the jQuery prototype for later instantiation

// HANDLE: $(""), $(null), $(undefined), $(false)

// Method init() accepts an alternate rootjQuery

// so migrate can support jQuery.sub (gh-2101)

// Handle HTML strings

// Match html or make sure no context is specified for #id

// Assume that strings that start and end with <> are HTML and skip the regex check

// HANDLE: $(DOMElement)

// HANDLE: $(html) -> $(array)

// HANDLE: $(html, props)

// Option to run scripts is true for back-compat

// Intentionally let the error be thrown if parseHTML is not present

// Properties of context are called as methods if possible

// HANDLE: $(#id)

// HANDLE: $(expr, $(...))

// Inject the element directly into the jQuery object

// Execute immediately if ready is not present

// Initialize central reference

// Methods guaranteed to produce a unique set when starting from a unique set

// Positional selectors never match, since there's no _selection_ context

// Always skip document fragments

// Don't pass non-elements to Sizzle

// Determine the position of an element within the set

// No argument, return index in parent

// Index in selector

// If it receives a jQuery object, the first element is used

// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only

// Treat the template element as a regular one in browsers that

// don't support it.

// Remove duplicates

// Reverse order for parents* and prev-derivatives

// Convert String-formatted options into Object-formatted ones

// Check for promise aspect first to privilege synchronous behavior

// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:

// * false: [ value ].slice( 0 ) => resolve( value )

// * true: [ value ].slice( 1 ) => resolve()

// For Promises/A+, convert exceptions into rejections

// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in

// Deferred#then to conditionally suppress rejection.

// Support: Android 4.0 only

// Strict mode functions invoked without .call/.apply get global-object context

/*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */

// Convert options from String-formatted to Object-formatted if needed

// (we check in cache first)

// Flag to know if list is currently firing

// Last fire value for non-forgettable lists

// Flag to know if list was already fired

// Flag to prevent firing

// Actual callback list

// Queue of execution data for repeatable lists

// Index of currently firing callback (modified by add/remove as needed)

// Fire callbacks

// Enforce single-firing

// Execute callbacks for all pending executions,

// respecting firingIndex overrides and runtime changes

// Run callback and check for early termination

// Jump to end and forget the data so .add doesn't re-fire

// Forget the data if we're done with it

// Clean up if we're done firing for good

// Keep an empty list if we have data for future add calls

// Actual Callbacks object

// Add a callback or a collection of callbacks to the list

// If we have memory from a past run, we should fire after adding

// Inspect recursively

// Remove a callback from the list

// Handle firing indexes

// Check if a given callback is in the list.

// If no argument is given, return whether or not list has callbacks attached.

// Remove all callbacks from the list

// Disable .fire and .add

// Abort any current/pending executions

// Clear all callbacks and values

// Disable .fire

// Also disable .add unless we have memory (since it would have no effect)

// Abort any pending executions

// Call all callbacks with the given context and arguments

// Call all the callbacks with the given arguments

// To know if the callbacks have already been called at least once

// action, add listener, callbacks,

// ... .then handlers, argument index, [final state]

// Keep pipe for back-compat

// Map tuples (progress, done, fail) to arguments (done, fail, progress)

// deferred.progress(function() { bind to newDefer or newDefer.notify })

// deferred.done(function() { bind to newDefer or newDefer.resolve })

// deferred.fail(function() { bind to newDefer or newDefer.reject })

// Support: Promises/A+ section 2.3.3.3.3

// https://promisesaplus.com/#point-59

// Ignore double-resolution attempts

// Support: Promises/A+ section 2.3.1

// https://promisesaplus.com/#point-48

// Support: Promises/A+ sections 2.3.3.1, 3.5

// https://promisesaplus.com/#point-54

// https://promisesaplus.com/#point-75

// Retrieve `then` only once

// Support: Promises/A+ section 2.3.4

// https://promisesaplus.com/#point-64

// Only check objects and functions for thenability

// Handle a returned thenable

// Special processors (notify) just wait for resolution

// ...and disregard older resolution values

// Only substitute handlers pass on context

// and multiple values (non-spec behavior)

// Process the value(s)

// Default process is resolve

// Only normal processors (resolve) catch and reject exceptions

// Support: Promises/A+ section 2.3.3.3.4.1

// https://promisesaplus.com/#point-61

// Ignore post-resolution exceptions

// Support: Promises/A+ section 2.3.3.3.1

// https://promisesaplus.com/#point-57

// Re-resolve promises immediately to dodge false rejection from

// subsequent errors

// Call an optional hook to record the stack, in case of exception

// since it's otherwise lost when execution goes async

// progress_handlers.add( ... )

// fulfilled_handlers.add( ... )

// rejected_handlers.add( ... )

// Get a promise for this deferred

// If obj is provided, the promise aspect is added to the object

// Add list-specific methods

// All done!

// promise.progress = list.add

// promise.done = list.add

// promise.fail = list.add

// Handle state

// state = "resolved" (i.e., fulfilled)

// state = "rejected"

// rejected_callbacks.disable

// fulfilled_callbacks.disable

// rejected_handlers.disable

// fulfilled_handlers.disable

// progress_callbacks.lock

// progress_handlers.lock

// progress_handlers.fire

// fulfilled_handlers.fire

// rejected_handlers.fire

// deferred.notify = function() { deferred.notifyWith(...) }

// deferred.resolve = function() { deferred.resolveWith(...) }

// deferred.reject = function() { deferred.rejectWith(...) }

// deferred.notifyWith = list.fireWith

// deferred.resolveWith = list.fireWith

// deferred.rejectWith = list.fireWith

// Make the deferred a promise

// Call given func if any

// Deferred helper

// count of uncompleted subordinates

// count of unprocessed arguments

// subordinate fulfillment data

// the master Deferred

// subordinate callback factory

// Single- and empty arguments are adopted like Promise.resolve

// Multiple arguments are aggregated like Promise.all array elements

// These usually indicate a programmer mistake during development,

// warn about them ASAP rather than swallowing them by default.

// Support: IE 8 - 9 only

// Console exists when dev tools are open, which can happen at any time

// The deferred used on DOM ready

// The ready event handler and self cleanup method

// Catch cases where $(document).ready() is called

// after the browser event has already occurred.

// Support: IE <=9 - 10 only

// Older IE sometimes signals "interactive" too soon

// Is the DOM ready to be used? Set to true once it occurs.

// A counter to track how many items to wait for before

// the ready event fires. See #6781

// Handle when the DOM is ready

// Abort if there are pending holds or we're already ready

// Remember that the DOM is ready

// If a normal DOM Ready event fired, decrement, and wait if need be

// If there are functions bound, to execute

// Handle it asynchronously to allow scripts the opportunity to delay ready

// Use the handy event callback

// A fallback to window.onload, that will always work

// Multifunctional method to get and set values of a collection

// The value/s can optionally be executed if it's a function

// Sets many values

// Sets one value

// Bulk operations run against the entire set

// Gets

// Matches dashed string for camelizing

// Used by camelCase as callback to replace()

// Convert dashed to camelCase; used by the css and data modules

// Support: IE <=9 - 11, Edge 12 - 15

// Microsoft forgot to hump their vendor prefix (#9572)

// Accepts only:

//  - Node

//    - Node.ELEMENT_NODE

//    - Node.DOCUMENT_NODE

//  - Object

//    - Any

// Check if the owner object already has a cache

// If not, create one

// We can accept data for non-element nodes in modern browsers,

// but we should not, see #8335.

// Always return an empty object.

// If it is a node unlikely to be stringify-ed or looped over

// use plain assignment

// Handle: [ owner, key, value ] args

// Always use camelCase key (gh-2257)

// Handle: [ owner, { properties } ] args

// Copy the properties one-by-one to the cache object

// In cases where either:

//

//   1. No key was specified

//   2. A string key was specified, but no value provided

// Take the "read" path and allow the get method to determine

// which value to return, respectively either:

//   1. The entire cache object

//   2. The data stored at the key

// When the key is not a string, or both a key and value

// are specified, set or extend (existing objects) with either:

//   1. An object of properties

//   2. A key and value

// Support array or space separated string of keys

// If key is an array of keys...

// We always set camelCase keys, so remove that.

// Remove the expando if there's no more data

// Support: Chrome <=35 - 45

// Webkit & Blink performance suffers when deleting properties

// from DOM nodes, so set to undefined instead

// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)

// If nothing was found internally, try to fetch any

// data from the HTML5 data-* attribute

// Only convert to a number if it doesn't change the string

// Make sure we set the data so it isn't changed later

// TODO: Now that all calls to _data and _removeData have been replaced

// with direct calls to dataPriv methods, these can be deprecated.

// Gets all values

// Support: IE 11 only

// The attrs elements can be null (#14894)

// Sets multiple values

// The calling jQuery object (element matches) is not empty

// (and therefore has an element appears at this[ 0 ]) and the

// `value` parameter was not undefined. An empty jQuery object

// will result in `undefined` for elem = this[ 0 ] which will

// throw an exception if an attempt to read a data cache is made.

// Attempt to get data from the cache

// The key will always be camelCased in Data

// Attempt to "discover" the data in

// HTML5 custom data-* attrs

// We tried really hard, but the data doesn't exist.

// Set the data...

// We always store the camelCased key

// Speed up dequeue by getting out quickly if this is just a lookup

// If the fx queue is dequeued, always remove the progress sentinel

// Add a progress sentinel to prevent the fx queue from being

// automatically dequeued

// Clear up the last queue stop function

// Not public - generate a queueHooks object, or return the current one

// Ensure a hooks for this queue

// Get a promise resolved when queues of a certain type

// are emptied (fx is the type by default)

// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only

// Check attachment across shadow DOM boundaries when possible (gh-3504)

// Support: iOS 10.0-10.2 only

// Early iOS 10 versions support `attachShadow` but not `getRootNode`,

// leading to errors. We need to check for `getRootNode`.

// Inline style trumps all

// isHiddenWithinTree might be called from jQuery#filter function;

// in that case, element will be second argument

// Otherwise, check computed style

// Support: Firefox <=43 - 45

// Disconnected elements can have computed display: none, so first confirm that elem is

// in the document.

// Remember the old values, and insert the new ones

// Revert the old values

// Starting value computation is required for potential unit mismatches

// Support: Firefox <=54

// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)

// Trust units reported by jQuery.css

// Iteratively approximate from a nonzero starting point

// Evaluate and update our best guess (doubling guesses that zero out).

// Finish if the scale equals or crosses 1 (making the old*new product non-positive).

// Make sure we update the tween properties later on

// Apply relative offset (+=/-=) if specified

// Determine new display value for elements that need to change

// Since we force visibility upon cascade-hidden elements, an immediate (and slow)

// check is required in this first loop unless we have a nonempty display value (either

// inline or about-to-be-restored)

// Remember what we're overwriting

// Set the display of the elements in a second loop to avoid constant reflow

// Support: IE <=9 only

// XHTML parsers do not magically insert elements in the

// same way that tag soup parsers do. So we cannot shorten

// this by omitting <tbody> or other required elements.

// Support: IE <=9 - 11 only

// Use typeof to avoid zero-argument method invocation on host objects (#15151)

// Mark scripts as having already been evaluated

// Add nodes directly

// Convert non-html into a text node

// Deserialize a standard representation

// Descend through wrappers to the right content

// Ensure the created nodes are orphaned (#12392)

// Remember the top-level container

// Convert html into DOM nodes

// Remove wrapper from fragment

// Skip elements already in the context collection (trac-4087)

// Capture executables

// Append to fragment

// Preserve script evaluation history

// Support: Android 4.0 - 4.3 only

// Check state lost if the name is set (#11217)

// Support: Windows Web Apps (WWA)

// `name` and `type` must use .setAttribute for WWA (#14901)

// Support: Android <=4.1 only

// Older WebKit doesn't clone checked state correctly in fragments

// Support: IE <=11 only

// Make sure textarea (and checkbox) defaultValue is properly cloned

// Support: IE <=9 - 11+

// focus() and blur() are asynchronous, except when they are no-op.

// So expect focus to be synchronous when the element is already active,

// and blur to be synchronous when the element is not already active.

// (focus and blur are always synchronous in other supported browsers,

// this just defines when we can count on it).

// Accessing document.activeElement can throw unexpectedly

// https://bugs.jquery.com/ticket/13393

// Types can be a map of types/handlers

// ( types-Object, selector, data )

// ( types-Object, data )

// ( types, fn )

// ( types, selector, fn )

// ( types, data, fn )

// Use same guid so caller can remove using origFn

// Can use an empty set, since event contains the info

/*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */

// Ensure the presence of an event listener that handles manually-triggered

// synthetic events by interrupting progress until reinvoked in response to

// *native* events that it fires directly, ensuring that state changes have

// already occurred before other listeners are invoked.

// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add

// Register the controller as a special universal handler for all event namespaces

// Interrupt processing of the outer synthetic .trigger()ed event

// Saved data should be false in such cases, but might be a leftover capture object

// from an async native handler (gh-4350)

// If this is a native event triggered above, everything is now in order

// Fire an inner synthetic event with the original arguments

// Store arguments for use when handling the inner native event

// There will always be at least one argument (an event object), so this array

// will not be confused with a leftover capture object.

// Trigger the native event and capture its result

// focus() and blur() are asynchronous

// Cancel the outer synthetic event

// If this is an inner synthetic event for an event with a bubbling surrogate

// (focus or blur), assume that the surrogate already propagated from triggering the

// native event and prevent that from happening again here.

// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the

// bubbling surrogate propagates *after* the non-bubbling base), but that seems

// less bad than duplication.

// ...and capture the result

// Extend with the prototype to reset the above stopImmediatePropagation()

// Abort handling of the native event

// Don't attach events to noData or text/comment nodes (but allow plain objects)

// Caller can pass in an object of custom data in lieu of the handler

// Ensure that invalid selectors throw exceptions at attach time

// Evaluate against documentElement in case elem is a non-element node (e.g., document)

// Make sure that the handler has a unique ID, used to find/remove it later

// Init the element's event structure and main handler, if this is the first

// Discard the second event of a jQuery.event.trigger() and

// when an event is called after a page has unloaded

// Handle multiple events separated by a space

// There *must* be a type, no attaching namespace-only handlers

// If event changes its type, use the special event handlers for the changed type

// If selector defined, determine special event api type, otherwise given type

// Update special based on newly reset type

// handleObj is passed to all event handlers

// Init the event handler queue if we're the first

// Only use addEventListener if the special events handler returns false

// Add to the element's handler list, delegates in front

// Keep track of which events have ever been used, for event optimization

// Detach an event or set of events from an element

// Once for each type.namespace in types; type may be omitted

// Unbind all events (on this namespace, if provided) for the element

// Remove matching events

// Remove generic event handler if we removed something and no more handlers exist

// (avoids potential for endless recursion during removal of special event handlers)

// Remove data and the expando if it's no longer used

// Make a writable jQuery.Event from the native event object

// Use the fix-ed jQuery.Event rather than the (read-only) native event

// Call the preDispatch hook for the mapped type, and let it bail if desired

// Determine handlers

// Run delegates first; they may want to stop propagation beneath us

// If the event is namespaced, then each handler is only invoked if it is

// specially universal or its namespaces are a superset of the event's.

// Call the postDispatch hook for the mapped type

// Find delegate handlers

// Support: IE <=9

// Black-hole SVG <use> instance trees (trac-13180)

// Support: Firefox <=42

// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)

// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click

// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)

// Don't check non-elements (#13208)

// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)

// Don't conflict with Object.prototype properties (#13203)

// Add the remaining (directly-bound) handlers

// Prevent triggered image.load events from bubbling to window.load

// Utilize native event to ensure correct state for checkable inputs

// For mutual compressibility with _default, replace `this` access with a local var.

// `|| data` is dead code meant only to preserve the variable through minification.

// Claim the first handler

// Return false to allow normal processing in the caller

// dataPriv.set( el, "click", ... )

// Force setup before triggering a click

// Return non-false to allow normal event-path propagation

// For cross-browser consistency, suppress native .click() on links

// Also prevent it if we're currently inside a leveraged native-event stack

// Support: Firefox 20+

// Firefox doesn't alert if the returnValue field is not set.

// This "if" is needed for plain objects

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding

// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html

// Allow instantiation without the 'new' keyword

// Event object

// Events bubbling up the document may have been marked as prevented

// by a handler lower down the tree; reflect the correct value.

// Support: Android <=2.3 only

// Create target properties

// Support: Safari <=6 - 7 only

// Target should not be a text node (#504, #13143)

// Put explicitly provided properties onto the event object

// Create a timestamp if incoming event doesn't have one

// Mark it as fixed

// Includes all common event props including KeyEvent and MouseEvent specific props

// Add which for key events

// Add which for click: 1 === left; 2 === middle; 3 === right

// Utilize native event if possible so blur/focus sequence is correct

// dataPriv.set( this, "focus", ... )

// dataPriv.set( this, "blur", ... )

// Force setup before trigger

// Create mouseenter/leave events using mouseover/out and event-time checks

// so that event delegation works in jQuery.

// Do the same for pointerenter/pointerleave and pointerover/pointerout

// Support: Safari 7 only

// Safari sends mouseenter too often; see:

// https://bugs.chromium.org/p/chromium/issues/detail?id=470258

// for the description of the bug (it existed in older Chrome versions as well).

// For mouseenter/leave call the handler if related is outside the target.

// NB: No relatedTarget if the mouse left/entered the browser window

// ( event )  dispatched jQuery.Event

// ( types-object [, selector] )

// ( types [, fn] )

/* eslint-disable max-len */

// See https://github.com/eslint/eslint/issues/3229

/* eslint-enable */

// Support: IE <=10 - 11, Edge 12 - 13 only

// In IE/Edge using regex groups here causes severe slowdowns.

// See https://connect.microsoft.com/IE/feedback/details/1736512/

// checked="checked" or checked

// Prefer a tbody over its parent table for containing new rows

// Replace/restore the type attribute of script elements for safe DOM manipulation

// 1. Copy private data: events, handlers, etc.

// 2. Copy user data

// Fix IE bugs, see support tests

// Fails to persist the checked state of a cloned checkbox or radio button.

// We can't cloneNode fragments that contain checked, in WebKit

// Use the original fragment for the last item

// instead of the first because it can end up

// being emptied incorrectly in certain situations (#8070).

// Keep references to cloned scripts for later restoration

// Evaluate executable scripts on first document insertion

// Reenable scripts

// Optional AJAX dependency, but won't run scripts if not present

// Fix IE cloning issues

// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2

// Copy the events from the original to the clone

// Return the cloned set

// Support: Chrome <=35 - 45+

// Assign undefined instead of using delete, see Data#remove

// Prevent memory leaks

// Remove any remaining nodes

// See if we can take a shortcut and just use innerHTML

// Remove element nodes and prevent memory leaks

// Make the changes, replacing each non-ignored context element with the new content

// Force callback invocation

// .get() because push.apply(_, arraylike) throws on ancient WebKit

// Support: IE <=11 only, Firefox <=30 (#15098, #14150)

// IE throws on elements created in popups

// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"

// Support: Firefox 51+

// Retrieving style before computed somehow

// fixes an issue with getting wrong values

// on detached elements

// getPropertyValue is needed for:

//   .css('filter') (IE 9 only, #12537)

//   .css('--customProperty) (#3144)

// A tribute to the "awesome hack by Dean Edwards"

// Android Browser returns percentage for some values,

// but width seems to be reliably pixels.

// This is against the CSSOM draft spec:

// https://drafts.csswg.org/cssom/#resolved-values

// Remember the original values

// Put in the new values to get a computed value out

// Revert the changed values

// IE returns zIndex value as an integer.

// Define the hook, we'll check on the first run if it's really needed.

// Hook needed; redefine it so that the support test is not executed again.

// Hook not needed (or it's not possible to use it due

// to missing dependency), remove it.

// Executing both pixelPosition & boxSizingReliable tests require only one layout

// so they're executed at the same time to save the second computation.

// This is a singleton, we need to execute it only once

// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3

// Some styles come back with percentage values, even though they shouldn't

// Support: IE 9 - 11 only

// Detect misreporting of content dimensions for box-sizing:border-box elements

// Support: IE 9 only

// Detect overflow:scroll screwiness (gh-3699)

// Support: Chrome <=64

// Don't get tricked when zoom affects offsetWidth (gh-4029)

// Nullify the div so it wouldn't be stored in the memory and

// it will also be a sign that checks already performed

// Finish early in limited (non-browser) environments

// Style of cloned element affects source element cloned (#8908)

// Return a vendor-prefixed property or undefined

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property

// Check for vendor prefixed names

// Swappable if display is none or starts with table

// except "table", "table-cell", or "table-caption"

// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display

// Any relative (+/-) values have already been

// normalized at this point

// Guard against undefined "subtract", e.g., when used as in cssHooks

// Adjustment may not be necessary

// Both box models exclude margin

// If we get here with a content-box, we're seeking "padding" or "border" or "margin"

// For "content", subtract padding

// For "content" or "padding", subtract border

// Add padding

// For "border" or "margin", add border

// Account for positive content-box scroll gutter when requested by providing computedVal

// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border

// Assuming integer scroll gutter, subtract the rest and round down

// Start with computed style

// Return a confounding non-pixel value or feign ignorance, as appropriate.

// Fall back to offsetWidth/offsetHeight when value is "auto"

// This happens for inline elements with no explicit setting (gh-3571)

// Support: Android <=4.1 - 4.3 only

// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)

// Support: IE 9-11 only

// Also use offsetWidth/offsetHeight for when box sizing is unreliable

// We use getClientRects() to check for hidden/disconnected.

// In those cases, the computed value can be trusted to be border-box

// Adjust for the element's box model

// Where available, offsetWidth/offsetHeight approximate border box dimensions.

// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the

// retrieved value as a content box dimension.

// Normalize "" and auto

// Provide the current computed size to request scroll gutter calculation (gh-3589)

// Add in style property hooks for overriding the default

// behavior of getting and setting a style property

// We should always get a number back from opacity

// Don't automatically add "px" to these possibly-unitless properties

// Add in properties whose names you wish to fix before

// setting or getting the value

// Get and set the style property on a DOM Node

// Don't set styles on text and comment nodes

// Make sure that we're working with the right name

// Make sure that we're working with the right name. We don't

// want to query the value if it is a CSS custom property

// since they are user-defined.

// Check if we're setting a value

// Gets hook for the prefixed version, then unprefixed version

// If a hook was provided get the non-computed value from there

// Otherwise just get the value from the style object

// Convert "+=" or "-=" to relative numbers (#7345)

// Fixes bug #9237

// Make sure that null and NaN values aren't set (#7116)

// If a number was passed in, add the unit (except for certain CSS properties)

// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append

// "px" to a few hardcoded values.

// background-* props affect original clone's values

// If a hook was provided, use that value, otherwise just set the specified value

// want to modify the value if it is a CSS custom property

// Make numeric if forced or a qualifier was provided and val looks numeric

// If a hook was provided get the computed value from there

// Try prefixed name followed by the unprefixed name

// Otherwise, if a way to get the computed value exists, use that

// Convert "normal" to computed value

// Certain elements can have dimension info if we invisibly show them

// but it must have a current display style that would benefit

// Support: Safari 8+

// Table columns in Safari have non-zero offsetWidth & zero

// getBoundingClientRect().width unless display is changed.

// Running getBoundingClientRect on a disconnected node

// in IE throws an error.

// Only read styles.position if the test has a chance to fail

// to avoid forcing a reflow.

// Account for unreliable border-box dimensions by comparing offset* to computed and

// faking a content-box to get border and padding (gh-3699)

// Convert to pixels if value adjustment is needed

// These hooks are used by animate to expand properties

// Assumes a single number if not a string

// Use a property on the element directly when it is not a DOM element,

// or when there is no matching style property that exists.

// Passing an empty string as a 3rd parameter to .css will automatically

// attempt a parseFloat and fallback to a string if the parse fails.

// Simple values such as "10px" are parsed to Float;

// complex values such as "rotate(1rad)" are returned as-is.

// Use step hook for back compat.

// Use cssHook if its there.

// Use .style if available and use plain properties where available.

// Panic based approach to setting things on disconnected nodes

// Back compat <1.8 extension point

// Animations created synchronously will run synchronously

// Generate parameters to create a standard animation

// If we include width, step value is 1 to do all cssExpand values,

// otherwise step value is 2 to skip over Left and Right

// We're done with this property

// Don't match elem in the :animated selector

// If there's more to do, yield

// If this was an empty animation, synthesize a final progress notification

// Resolve the animation and report its conclusion

// If we are going to the end, we want to run all the tweens

// otherwise we skip this part

// Resolve when we played the last frame; otherwise, reject

// camelCase, specialEasing and expand cssHook pass

// Not quite $.extend, this won't overwrite existing keys.

// Reusing 'index' because we have the correct "name"

// Attach callbacks from options

// Queue-skipping animations hijack the fx hooks

// Detect show/hide animations

// Ensure the complete handler is called before this completes

// Pretend to be hidden if this is a "show" and

// there is still data from a stopped show/hide

// Bail out if this is a no-op like .hide().hide()

// Restrict "overflow" and "display" styles during box animations

// Record all 3 overflow attributes because IE does not infer the shorthand

// from identically-valued overflowX and overflowY and Edge just mirrors

// the overflowX value there.

// Identify a display type, preferring old show/hide data over the CSS cascade

// Get nonempty value(s) by temporarily forcing visibility

// Animate inline elements as inline-block

// Restore the original display value at the end of pure show/hide animations

// Implement show/hide animations

// General show/hide setup for this element animation

// Store hidden/visible for toggle so `.stop().toggle()` "reverses"

// Show elements before animating them

/* eslint-disable no-loop-func */

/* eslint-enable no-loop-func */

// The final step of a "hide" animation is actually hiding the element

// Per-property setup

// Go to the end state if fx are off

// Normalize opt.queue - true/undefined/null -> "fx"

// Queueing

// Show any hidden elements after setting opacity to 0

// Operate on a copy of prop so per-property easing won't be lost

// Empty animations, or finishing resolves immediately

// Start the next in the queue if the last step wasn't forced.

// Timers currently will call their complete callbacks, which

// will dequeue but only if they were gotoEnd.

// Enable finishing flag on private data

// Look for any active animations, and finish them

// Empty the queue first

// Look for any animations in the old queue and finish them

// Turn off finishing flag

// Generate shortcuts for custom animations

// Run the timer and safely remove it when done (allowing for external removal)

// Default speed

// Based off of the plugin by Clint Helfers, with permission.

// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

// Support: Android <=4.3 only

// Default value for a checkbox should be "on"

// Must access selectedIndex to make default options select

// An input loses its value after becoming a radio

// Don't get/set attributes on text, comment and attribute nodes

// Fallback to prop when attributes are not supported

// Attribute hooks are determined by the lowercase version

// Grab necessary hook if one is defined

// Attribute names can contain non-HTML whitespace characters

// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2

// Hooks for boolean attributes

// Remove boolean attributes when set to false

// Avoid an infinite loop by temporarily removing this function from the getter

// Strip and collapse whitespace according to HTML spec

// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

// Don't get/set properties on text, comment and attribute nodes

// Fix name and attach hooks

// elem.tabIndex doesn't always return the

// correct value when it hasn't been explicitly set

// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/

// Use proper attribute retrieval(#12072)

// Accessing the selectedIndex property

// forces the browser to respect setting selected

// on the option

// The getter ensures a default option is selected

// when in an optgroup

// eslint rule "no-unused-expressions" is disabled for this code

// since it considers such accessions noop

/* eslint no-unused-expressions: "off" */

// Only assign if different to avoid unneeded rendering.

// This expression is here for better compressibility (see addClass)

// Remove *all* instances

// Toggle individual class names

// Check each className given, space separated list

// Toggle whole class name

// Store className if set

// If the element has a class name or if we're passed `false`,

// then remove the whole classname (if there was one, the above saved it).

// Otherwise bring back whatever was previously saved (if anything),

// falling back to the empty string if nothing was stored.

// Treat null/undefined as ""; convert numbers to string

// If set returns undefined, fall back to normal setting

// Handle most common string cases

// Support: IE <=10 - 11 only

// option.text throws exceptions (#14686, #14858)

// Strip and collapse whitespace

// https://html.spec.whatwg.org/#strip-and-collapse-whitespace

// Loop through all the selected options

// IE8-9 doesn't update selected after form reset (#2551)

// Don't return options that are disabled or in a disabled optgroup

// We don't need an array for one selects

// Get the specific value for the option

// Multi-Selects return an array

/* eslint-disable no-cond-assign */

/* eslint-enable no-cond-assign */

// Force browsers to behave consistently when non-matching value is set

// Radios and checkboxes getter/setter

// Return jQuery for attributes-only inclusion

// Don't do events on text and comment nodes

// Namespaced trigger; create a regexp to match event type in handle()

// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

// Caller can pass in a jQuery.Event object, Object, or just an event type string

// Clean up the event in case it is being reused

// Clone any incoming data and prepend the event, creating the handler arg list

// Allow special events to draw outside the lines

// Determine event propagation path in advance, per W3C events spec (#9951)

// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)

// Only add window if we got to document (e.g., not plain obj or detached DOM)

// Fire handlers on the event path

// jQuery handler

// Native handler

// If nobody prevented the default action, do it now

// Call a native DOM method on the target with the same name as the event.

// Don't do default actions on window, that's where global variables be (#6170)

// Don't re-trigger an onFOO event when we call its FOO() method

// Prevent re-triggering of the same event, since we already bubbled it above

// focus/blur morphs to focusin/out; ensure we're not firing them right now

// Piggyback on a donor event to simulate a different one

// Used only for `focus(in | out)` events

// Support: Firefox <=44

// Firefox doesn't have focus(in | out) events

// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787

// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1

// focus(in | out) events fire after focus & blur events,

// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order

// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

// Attach a single capturing handler on the document while someone wants focusin/focusout

// Cross-browser xml parsing

// IE throws on parseFromString with invalid input.

// Serialize array item.

// Treat each array item as a scalar.

// Item is non-scalar (array or object), encode its numeric index.

// Serialize scalar item.

// Serialize object item.

// Serialize an array of form elements or a set of

// key/values into a query string

// If value is a function, invoke it and use its return value

// If an array was passed in, assume that it is an array of form elements.

// Serialize the form elements

// If traditional, encode the "old" way (the way 1.3.2 or older

// did it), otherwise encode params recursively.

// Return the resulting serialization

// Can add propHook for "elements" to filter or add form elements

// Use .is( ":disabled" ) so that fieldset[disabled] works

/* Prefilters
   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
   * 2) These are called:
   *    - BEFORE asking for a transport
   *    - AFTER param serialization (s.data is a string if s.processData is true)
   * 3) key is the dataType
   * 4) the catchall symbol "*" can be used
   * 5) execution will start with transport dataType and THEN continue down to "*" if needed
   */

/* Transports bindings
   * 1) key is the dataType
   * 2) the catchall symbol "*" can be used
   * 3) selection will start with transport dataType and THEN go to "*" if needed
   */

// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression

// Anchor tag for parsing the document origin

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport

// dataTypeExpression is optional and defaults to "*"

// For each dataType in the dataTypeExpression

// Prepend if requested

// Base inspection function for prefilters and transports

// A special extend for ajax options

// that takes "flat" options (not to be deep extended)

// Fixes #9887

/* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */

// Counter for holding the number of active queries

// Last-Modified header cache for next request

/*
      timeout: 0,
      data: null,
      dataType: null,
      username: null,
      password: null,
      cache: null,
      throws: false,
      traditional: false,
      headers: {},
      */

// Data converters

// Keys separate source (or catchall "*") and destination types with a single space

// Convert anything to text

// Text to html (true = no transformation)

// Evaluate text as a json expression

// Parse text as xml

// For options that shouldn't be deep extended:

// you can add your own custom options here if

// and when you create one that shouldn't be

// deep extended (see ajaxExtend)

// Creates a full fledged settings object into target

// with both ajaxSettings and settings fields.

// If target is omitted, writes into ajaxSettings.

// Building a settings object

// Extending ajaxSettings

// Main method

// If url is an object, simulate pre-1.5 signature

// Force options to be an object

// URL without anti-cache param

// Response headers

// timeout handle

// Url cleanup var

// Request state (becomes false upon send and true upon completion)

// To know if global events are to be dispatched

// Loop variable

// uncached part of the url

// Create the final options object

// Callbacks context

// Context for global events is callbackContext if it is a DOM node or jQuery collection

// Deferreds

// Status-dependent callbacks

// Headers (they are sent all at once)

// Default abort message

// Fake xhr

// Builds headers hashtable if needed

// Raw string

// Caches the header

// Overrides response content-type header

// Execute the appropriate callbacks

// Lazy-add the new callbacks in a way that preserves old ones

// Cancel the request

// Attach deferreds

// A cross-domain request is in order when the origin doesn't match the current origin.

// Add protocol if not provided (prefilters might expect it)

// Handle falsy url in the settings object (#10093: consistency with old signature)

// We also use the url parameter if available

// Alias method option to type as per ticket #12004

// Extract dataTypes list

// Support: IE <=8 - 11, Edge 12 - 15

// IE throws exception on accessing the href property if url is malformed,

// e.g. http://example.com:80x/

// Support: IE <=8 - 11 only

// Anchor's host property isn't correctly set when s.url is relative

// If there is an error parsing the URL, assume it is crossDomain,

// it can be rejected by the transport if it is invalid

// Convert data if not already a string

// If request was aborted inside a prefilter, stop there

// Apply prefilters

// We can fire global events as of now if asked to

// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)

// Check for headers option

// Watch for a new set of requests

// Uppercase the type

// Determine if request has content

// Save the URL in case we're toying with the If-Modified-Since

// and/or If-None-Match header later on

// Remove hash to simplify url manipulation

// More options handling for requests with no content

// Remember the hash so we can put it back

// If data is available and should be processed, append data to url

// #9682: remove data so that it's not used in an eventual retry

// Add or update anti-cache param if needed

// Put hash and anti-cache on the URL that will be requested (gh-1732)

// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.

// Set the correct header, if data is being sent

// Set the Accepts header for the server, depending on the dataType

// Allow custom headers/mimetypes and early abort

// Abort if not done already and return

// Aborting is no longer a cancellation

// If no transport, we auto-abort

// Install callbacks on deferreds

// Get transport

// If request was aborted inside ajaxSend, stop there

// Send global event

// Timeout

// Rethrow post-completion exceptions

// Propagate others as results

// Callback for when everything is done

// Ignore repeat invocations

// Clear timeout if it exists

// Dereference transport for early garbage collection

// (no matter how long the jqXHR object will be used)

// Cache response headers

// Set readyState

// Determine if successful

// Get response data

// Remove auto dataType and get content-type in the process

// Check if we're dealing with a known content-type

// Check to see if we have a response for the expected dataType

// Try convertible dataTypes

// Or just use first one

// If we found a dataType

// We add the dataType to the list if needed

// and return the corresponding response

/* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */

// Convert no matter what (that way responseXXX fields are always set)

// Work with a copy of dataTypes in case we need to modify it for conversion

// Create converters map with lowercased keys

// Convert to each sequential dataType

// Apply the dataFilter if provided

// There's only work to do if current dataType is non-auto

// Convert response if prev dataType is non-auto and differs from current

// If none found, seek a pair

// Seek a direct converter

// If conv2 outputs current

// If prev can be converted to accepted input

// Condense equivalence converters

// Apply converter (if not an equivalence)

// Unless errors are allowed to bubble, catch and return them

// If successful, handle type chaining

// if no content

// Extract error from statusText and normalize for non-aborts

// Set data for the fake xhr object

// Success/Error

// Complete

// Handle the global AJAX counter

// The url can be an options object (which then must have .url)

// Shift arguments if data argument was omitted

// Make this explicit, since user can override this through ajaxSetup (#11264)

// Only evaluate the response if it is successful (gh-4126)

// dataFilter is not invoked for failure responses, so using it instead

// of the default converter is kludgy but it works.

// The elements to wrap the target around

// File protocol always yields status code 0, assume 200

// #1450: sometimes IE returns 1223 when it should be 204

// Cross domain only allowed if supported through XMLHttpRequest

// Apply custom fields if provided

// Override mime type if needed

// Set headers

// X-Requested-With header

// For cross-domain requests, seeing as conditions for a preflight are

// akin to a jigsaw puzzle, we simply never set it to be sure.

// (it can always be set on a per-request basis or even using ajaxSetup)

// For same-domain requests, won't change header if already provided.

// Callback

// On a manual native abort, IE9 throws

// errors on any property access that is not readyState

// File: protocol always yields status 0; see #8605, #14207

// IE9 has no XHR2 but throws on binary (trac-11426)

// For XHR2 non-text, let the caller handle it (gh-2498)

// Listen to events

// Use onreadystatechange to replace onabort

// to handle uncaught aborts

// Check readyState before timeout as it changes

// Allow onerror to be called first,

// but that will not handle a native abort

// Also, save errorCallback to a variable

// as xhr.onerror cannot be accessed

// Create the abort callback

// Do send the request (this may raise an exception)

// #14683: Only rethrow if this hasn't been notified as an error yet

// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)

// Install script dataType

// Handle cache's special case and crossDomain

// Bind script tag hack transport

// This transport only deals with cross domain or forced-by-attrs requests

// Use native DOM manipulation to avoid our domManip AJAX trickery

// Default jsonp settings

// Detect, normalize options and install callbacks for jsonp requests

// Handle iff the expected data type is "jsonp" or we have a parameter to set

// Delegate to script

// Get callback name, remembering preexisting value associated with it

// Insert callback into url or form data

// Use data converter to retrieve json after script execution

// Force json dataType

// Install callback

// Clean-up function (fires after converters)

// If previous value didn't exist - remove it

// Save back as free

// Make sure that re-using the options doesn't screw things around

// Save the callback name for future use

// Call if it was a function and we have a response

// Support: Safari 8 only

// In Safari 8 documents created via document.implementation.createHTMLDocument

// collapse sibling forms: the second one becomes a child of the first one.

// Because of that, this security measure has to be disabled in Safari 8.

// https://bugs.webkit.org/show_bug.cgi?id=137337

// Argument "data" should be string of html

// context (optional): If specified, the fragment will be created in this context,

// defaults to document

// keepScripts (optional): If true, will include scripts passed in the html string

// Single tag

// Stop scripts or inline event handlers from being executed immediately

// by using document.implementation

// Set the base href for the created document

// so any parsed elements with URLs

// are based on the document's URL (gh-2965)

/**
   * Load a url into a page
   */

// If it's a function

// We assume that it's the callback

// If we have elements to modify, make the request

// If "type" variable is undefined, then "GET" method will be used.

// Make value of this field explicit since

// user can override it through ajaxSetup method

// Save response for use in complete callback

// If a selector was specified, locate the right elements in a dummy div

// Exclude scripts to avoid IE 'Permission Denied' errors

// Otherwise use the full result

// Attach a bunch of functions for handling common AJAX events

// Set position first, in-case top/left are set even on static elem

// Need to be able to calculate position if either

// top or left is auto and position is either absolute or fixed

// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)

// offset() relates an element's border box to the document origin

// Preserve chaining for setter

// Return zeros for disconnected and hidden (display: none) elements (gh-2310)

// Running getBoundingClientRect on a

// disconnected node in IE throws an error

// Get document-relative position by adding viewport scroll to viewport-relative gBCR

// position() relates an element's margin box to its offset parent's padding box

// This corresponds to the behavior of CSS absolute positioning

// position:fixed elements are offset from the viewport, which itself always has zero offset

// Assume position:fixed implies availability of getBoundingClientRect

// Account for the *real* offset parent, which can be the document or its root element

// when a statically positioned element is identified

// Incorporate borders into its offset, since they are outside its content origin

// Subtract parent offsets and element margins

// This method will return documentElement in the following cases:

// 1) For the element inside the iframe without offsetParent, this method will return

//    documentElement of the parent window

// 2) For the hidden or detached element

// 3) For body or html element, i.e. in case of the html node - it will return itself

// but those exceptions were never presented as a real life use-cases

// and might be considered as more preferable results.

// This logic, however, is not guaranteed and can change at any point in the future

// Create scrollLeft and scrollTop methods

// Coalesce documents and windows

// Support: Safari <=7 - 9.1, Chrome <=37 - 49

// Add the top/left cssHooks using jQuery.fn.position

// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084

// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347

// getComputedStyle returns percent when specified for top/left/bottom/right;

// rather than make the css module depend on the offset module, just check for it here

// If curCSS returns percentage, fallback to offset

// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

// Margin is only for outerHeight, outerWidth

// Get document width or height

// Get width or height on the element, requesting but not forcing parseFloat

// Set width or height on the element

// Handle event binding

// ( namespace ) or ( selector, types [, fn] )

// Bind a function to a context, optionally partially applying any

// arguments.

// jQuery.proxy is deprecated to promote standards (specifically Function#bind)

// However, it is not slated for removal any time soon

// Quick check to determine if target is callable, in the spec

// this throws a TypeError, but we will just return undefined.

// Simulated bind

// Set the guid of unique handler to the same of original handler, so it can be removed

// As of jQuery 3.0, isNumeric is limited to

// strings and numbers (primitives or objects)

// that can be coerced to finite numbers (gh-2662)

// parseFloat NaNs numeric-cast false positives ("")

// ...but misinterprets leading-number strings, particularly hex literals ("0x...")

// subtraction forces infinities to NaN

// Map over jQuery in case of overwrite

// Map over the $ in case of overwrite

// Expose jQuery and $ identifiers, even in AMD

// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)

// and CommonJS for browser emulators (#13566)

/* 1 */

// contains in native

// export native or passed

// bind timers to global for call from export context

// extend global

// export

// type bitmap

// forced

// global

// static

// proto

// bind

// wrap

// safe

// real proto method for `library`

/* 2 */

/* 3 */

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028

// eslint-disable-line no-undef

/* 4 */

/* 5 */

/* 6 */

/* 7 */

/* 8 */

//! moment.js

// This is done to register the method called with moment()

// without creating circular dependencies.

// IE8 will treat undefined and null as object if it wasn't for

// input != null

// Plugins that add properties should also add the key here (null value),

// so we can properly clone ourselves.

// Moment prototype object

// Prevent infinite loop in case updateOffset creates new moment

// objects.

// compare two arrays, return the number of differences

// make sure changes to properties don't modify parent config

// token:    'M'

// padded:   ['MM', 2]

// ordinal:  'Mo'

// callback: function () { this.month() + 1 }

// format date using native date object

//       0 - 9

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript

// HELPERS

// HOOKS

// FORMATTING

// ALIASES

// PRIORITIES

// PARSING

// MOMENTS

// I know

// PRIORITY

// if we didn't find a month name, mark the date as invalid.

// LOCALES

// this is not used

// No op

// TODO: Another silent failure?

// make the regex if we don't have it already

// Sorting makes sure if one month (or abbr) is a prefix of another it

// will match the longer piece.

// can't just apply() to create a date:

// https://stackoverflow.com/q/181348

// the date constructor remaps years 0-99 to 1900-1999

// preserve leap years using a full 400 year cycle, then reset

// the Date.UTC function remaps years 0-99 to 1900-1999

// start-of-first-week - start-of-year

// first-week day -- which january is always in the first week (4 for iso, 1 for other)

// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday

// if we didn't get a weekday name, mark the date as invalid

// Sorting makes sure if one weekday (or abbr) is a prefix of another it

// Setting the hour should keep the time, because the user explicitly

// specified which hour they want. So trying to maintain the same hour (in

// a new timezone) makes sense. Adding/subtracting hours does not follow

// this rule.

// Sunday is the first day of the week.

// pick the locale from the array

// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each

// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root

// TODO: Find a better way to register and load all the locales in Node

// This function will load locale and then set the global locale.  If

// no arguments are passed in, it will simply return the current global

// locale key.

// moment.duration._locale = moment._locale = data;

// backwards compat for now: also set the locale

// make sure we set the locale AFTER all child locales have been

// created, so we won't end up with the child locale set.

// useful for testing

// returns locale data

//short-circuit everything else

//the next array item is better than a shallower substring of this one

// Pick the first defined of two or three arguments.

// convert an array to a date.

// the array should mirror the parameters below

// note: all values past the year are optional and will default to the lowest possible value.

// [year, month, day , hour, minute, second, millisecond]

// Default to current date.

// * if no year, month, day of month are given, default to today

// * if day of month is given, default month and year

// * if month is given, default only year

// * if year is given, don't default anything

// hooks is actually the exported moment object

//compute day of the year from weeks and weekdays

// TODO: We need to take the current isoWeekYear, but that depends on

// how we interpret now (local, utc, fixed offset). So create

// a now version of current config (take local/utc/offset flags, and

// create now).

// Default to current week.

// weekday -- low day numbers are considered next week

// local weekday -- counting starts from beginning of week

// default to beginning of week

// iso 8601 regex

// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)

//if the day of the year is set, figure out what it is

// Zero out whatever was not defaulted, including time

// Check for 24:00:00.000

// Apply timezone offset from input. The actual utcOffset can be changed

// with parseZone.

// check for mismatching day of week

// YYYYMM is NOT allowed by the standard

// date from iso format

// match[2] should be 'T' or space

// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3

// date and time from ref 2822 format

// the only allowed military tz is Z

// date from iso format or fallback

// date from string and format string

// TODO: Move this to another part of the creation flow to prevent circular deps

// This array is used to make a Date, either with `new Date` or `Date.UTC`

// console.log('token', token, 'parsedInput', parsedInput,

//         'regex', getParseRegexForToken(token, config));

// don't parse if it's not a known token

// add remaining unparsed input length to the string

// clear _12h flag if hour is <= 12

// handle meridiem

// Fallback

// date from string and array of format strings

// if there is any input that was not parsed add a penalty for that format

//or tokens

// Final attempt, use Input Fallback

// from milliseconds

// object construction must be done this way.

// https://github.com/moment/moment/issues/1423

// Adding is smart enough around DST

// constant that refers to the ISO standard

// constant that refers to the RFC 2822 form

// Pick a moment m from moments so that m[fn](other) is true for all

// other. This relies on the function fn to be transitive.

// moments should either be an array of moment objects or an array, whose

// first element is an array of moment objects.

// TODO: Use [].sort instead?

// only allow non-integers for smallest unit

// representation for dateAddRemove

// 1000

// 1000 * 60

//using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978

// Because of dateAddRemove treats 24 hours as different from a

// day when working around DST, we need to store them separately

// It is impossible to translate months into days without knowing

// which months you are are talking about, so we have to store

// it separately.

// timezone chunker

// '+10:00' > ['10',  '00']

// '-1530'  > ['-15', '30']

// Return a moment from input, that is local/utc/zone equivalent to model.

// Use low-level api, because this fn is low-level api.

// On Firefox.24 Date#getTimezoneOffset returns a floating point.

// https://github.com/moment/moment/pull/1871

// This function will be called whenever a moment is mutated.

// It is intended to keep the offset in sync with the timezone.

// ASP.NET json date format regex

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html

// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere

// and further modified to allow for strings containing both week and day

// matching against regexp is expensive, do it on demand

// checks for null or undefined

// We'd normally use ~~inp for this, but unfortunately it also

// converts floats to ints.

// inp may be undefined, so careful calling replace on it.

// apply sign while we're at it

// TODO: remove 'name' arg after deprecation is removed

//invert the arguments, but complain about it

// difference in months

// b is in (anchor - 1 month, anchor + 1 month)

//check for negative zero, return zero if negative zero

// If passed a locale key, it will set the locale for this

// instance.  Otherwise, it will return the locale configuration

// variables for this instance.

// actual modulo - handles negative numbers (for dates before 1970):

// Date.UTC remaps years 0-99 to 1900-1999

// TODO: Remove "ordinalParse" fallback in next major release.

// We want to compare the start of today, vs this.

// Getting start-of-today depends on whether we're local/utc/offset or not.

// 1000 * 60 * 60

// 1000 * 60 * 60 * 24, negate dst

// 1000 * 60 * 60 * 24 * 7, negate dst

// native implementation is ~50x faster, use it when we can

/**
   * Return a human readable representation of a moment that can
   * also be evaluated to get a new moment which is the same
   *
   * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
   */

// new Date(NaN).toJSON() === null

// behaves the same as moment#day except

// as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)

// as a setter, sunday should belong to the previous week.

// keepLocalTime = true means only change the timezone, without

// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->

// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset

// +0200, so we adjust the time as needed, to be valid.

// Keeping the time actually adds/subtracts (one hour)

// from the actual represented time. That is why we call updateOffset

// a second time. In case it wants us to change the offset again

// _changeInProgress == true case, then we have to adjust, because

// there is no such time in the given timezone.

// ()

// (5)

// (fmt, 5)

// (fmt)

// (true)

// (true, 5)

// (true, fmt, 5)

// (true, fmt)

// Lenient ordinal parsing accepts just a number in addition to

// number + (possibly) stuff coming from _dayOfMonthOrdinalParse.

// TODO: add sorting

// Sorting makes sure if one month (or abbr) is a prefix of another

// see sorting in computeMonthsParse

// test the regex

// IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays

// Using charAt should be more compatible.

// Side effect imports

// supports only 2.0-style add(1, 's') or add(duration)

// 400 years have 146097 days (taking into account leap year rules)

// 400 years have 12 months === 4800

// the reverse of daysToMonths

// a few seconds to seconds

// seconds to minute

// minutes to hour

// hours to day

// days to month

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize

// for ISO strings we do not use the normal bubbling rules:

//  * milliseconds bubble up until they become hours

//  * days do not bubble at all

//  * months bubble up until they become years

// This is because there is no context-free conversion between hours and days

// (think of clock changes)

// and also not between days and months (28-31 days per month)

// 3600 seconds -> 60 minutes -> 1 hour

// inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js

// this is the same as C#'s (Noda) and python (isodate)...

// but not other JS (goog.date)

// supports only 2.0-style subtract(1, 's') or subtract(duration)

// handle milliseconds separately because of floating point math errors (issue #1867)

// Math.floor prevents floating point math errors here

// TODO: Use this.as('ms')?

// if we have a mix of positive and negative values, bubble down first

// check: https://github.com/moment/moment/issues/2166

// The following code bubbles up values, see the tests for

// examples of what that means.

// convert days to months

// 12 months -> 1 year

// This function allows you to set the rounding function for relative time strings

// MERGE

// pass null for config to unupdate, useful for tests

// This function allows you to set a threshold for relative time strings

// currently HTML5 input type only supports 24-hour formats

// <input type="datetime-local" />

// <input type="datetime-local" step="1" />

// <input type="datetime-local" step="0.001" />

// <input type="date" />

// <input type="time" />

// <input type="time" step="1" />

// <input type="time" step="0.001" />

// <input type="week" />

/* 9 */

// 7.1.15 ToLength

// pow(2, 53) - 1 == 9007199254740991

/* 10 */

/* 11 */

// Thank's IE8 for his funny defineProperty

/* 12 */

/* empty */

/* 13 */

// 7.1.13 ToObject(argument)

/* 14 */

/* 15 */

/* 16 */

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */

// Don't bother if no value provided

// Force an array if not already something iterable

/*eslint no-param-reassign:0*/

// Iterate over array values

// Iterate over object keys

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */

/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */

/* 17 */

/* 18 */

/* 19 */

// to indexed object, toObject with fallback for non-array-like ES3 strings

/* 20 */

// eslint-disable-next-line no-useless-call

/* 21 */

// optional / simple context binding

/* 22 */

/* 23 */

// 7.1.4 ToInteger

/* 24 */

/* 25 */

// most Object methods by ES6 should accept primitives

/* 26 */

// 0 -> Array#forEach

// 1 -> Array#map

// 2 -> Array#filter

// 3 -> Array#some

// 4 -> Array#every

// 5 -> Array#find

// 6 -> Array#findIndex

// map

// some

// find

// findIndex

// filter

// every

/* 27 */

/* 28 */

// 7.2.1 RequireObjectCoercible(argument)

/* 29 */

// eslint-disable-next-line no-undef

/* , mapfn, thisArg */

/* , end */

/* , thisArg */

/* , start, end */

// eslint-disable-line no-unused-vars

/* , fromIndex */

/* , initialValue */

/* , offset */

/* noop */

// eslint-disable-next-line max-statements

// eslint-disable-line no-new

// `ws` module bug, temporarily remove validation length for Uint8Array

// https://github.com/websockets/ws/pull/645

/* 30 */

// 7.1.1 ToPrimitive(input [, PreferredType])

// instead of the ES6 spec version, we didn't implement @@toPrimitive case

// and the second argument - flag - preferred type is a string

/* 31 */

// object ID

// return primitive with prefix

// can't set metadata to uncaught frozen object

// not necessary to add metadata

// add missing metadata

/* 32 */

/* 33 */

/* 34 */

/* 35 */

// 19.1.2.14 / 15.2.3.14 Object.keys(O)

/* 36 */

/* 37 */

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])

// Thrash, waste and sodomy: IE GC bug

// eslint-disable-line no-script-url

// createDict = iframe.contentWindow.Object;

// html.removeChild(iframe);

// add "__proto__" for Object.getPrototypeOf polyfill

/* 38 */

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

/* 39 */

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)

/* 40 */

// 22.1.3.31 Array.prototype[@@unscopables]

/* 41 */

/* 42 */

/* 43 */

/* 44 */

/* 45 */

/* 46 */

/* 47 */

/* 48 */

// fallback for non-array-like ES3 and non-enumerable old V8 strings

// eslint-disable-next-line no-prototype-builtins

/* 49 */

/* 50 */

// getting tag from 19.1.3.6 Object.prototype.toString()

/* 51 */

// 7.3.20 SpeciesConstructor(O, defaultConstructor)

/* 52 */

/** @class */

/*yield*/

/*return*/

/* 53 */

/* 54 */

// false -> Array#indexOf

// true  -> Array#includes

// Array#includes uses SameValueZero equality algorithm

// eslint-disable-next-line no-self-compare

// Array#indexOf ignores holes, Array#includes - not

/* 55 */

/* 56 */

// 7.2.2 IsArray(argument)

/* 57 */

// eslint-disable-next-line no-throw-literal

/* 58 */

// 21.2.5.3 get RegExp.prototype.flags

/* 59 */

// `RegExpExec` abstract operation

// https://tc39.github.io/ecma262/#sec-regexpexec

/* 60 */

// #replace needs built-in support for named groups.

// #match works fine because it just return the exec results, even if it has

// a "grops" property.

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec

// String methods call symbol-named RegEp methods

// Symbol-named RegExp methods call .exec

// RegExp[@@split] doesn't call the regex's exec method, but first creates

// a new one. We need to return the patched regex when creating the new one.

// 21.2.5.6 RegExp.prototype[@@match](string)

// 21.2.5.9 RegExp.prototype[@@search](string)

/* 61 */

// fast case for arrays with default iterator

/* 62 */

/* 63 */

// V8 ~ Chromium 42- fails only with 5+ elements

// early implementations not supports chaining

// weak collections should not contains .clear method

// create collection constructor

/* 64 */

/* 65 */

// module.parent = undefined by default

/* 66 */

//! moment.js locale configuration

// Monday is the first day of the week.

/* 67 */

/* 68 */

/* 69 */

/* 70 */

/* 71 */

/* 72 */

/* 73 */

/* 74 */

// This works in non-strict mode

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// g can still be undefined, but nothing to do about it...

// We return undefined, instead of nothing here, so it's

// easier to handle this case. if(!global) { ...}

/* 75 */

/* 76 */

/* 77 */

/* 78 */

// IE 8- don't enum bug keys

/* 79 */

/* 80 */

// Works with __proto__ only. Old v8 can't work with null proto objects.

/* eslint-disable no-proto */

// eslint-disable-line

/* 81 */

/* 82 */

/* 83 */

/* 84 */

// 20.2.2.28 Math.sign(x)

/* 85 */

// 20.2.2.14 Math.expm1(x)

/* 86 */

// true  -> String#at

// false -> String#codePointAt

/* 87 */

// Fix native

// Set @@toStringTag to native iterators

// fix for some old engines

// fix Array#{values, @@iterator}.name in V8 / FF

// Define iterator

// Plug for library

/* 88 */

// helper for String#{startsWith, endsWith, includes}

/* 89 */

// 7.2.8 IsRegExp(argument)

/* 90 */

/* 91 */

// check on default Array iterator

/* 92 */

/* 93 */

/* 94 */

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

/* , start = 0, end = @length */

/* 95 */

// 22.1.3.4 Array.prototype.entries()

// 22.1.3.13 Array.prototype.keys()

// 22.1.3.29 Array.prototype.values()

// 22.1.3.30 Array.prototype[@@iterator]()

// target

// next index

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

/* 96 */

// Fix browsers whose `exec` methods don't consistently return `undefined`

// for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/

// eslint-disable-next-line no-loop-func

/* 97 */

// `AdvanceStringIndex` abstract operation

// https://tc39.github.io/ecma262/#sec-advancestringindex

/* 98 */

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:

// eslint-disable-next-line no-new-func

// Node.js 0.8-

/* 99 */

// IEEE754 conversions based on https://github.com/feross/ieee754

// iOS Safari 7.x bug

/* , littleEndian */

/* 100 */

/* 101 */

/* 102 */

/* 103 */

/* harmony default export */

/*#__PURE__*/

/* 104 */

// CONCATENATED MODULE: ./node_modules/ssr-window/dist/ssr-window.esm.js

/**
 * SSR Window 1.0.1
 * Better handling for window object in SSR environment
 * https://github.com/nolimits4web/ssr-window
 *
 * Copyright 2018, Vladimir Kharlampidi
 *
 * Licensed under MIT
 *
 * Released on: July 18, 2018
 */

/**
 * Dom7 2.1.3
 * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
 * http://framework7.io/docs/dom.html
 *
 * Copyright 2019, Vladimir Kharlampidi
 * The iDangero.us
 * http://www.idangero.us/
 *
 * Licensed under MIT
 *
 * Released on: February 11, 2019
 */

// CONCATENATED MODULE: ./node_modules/dom7/dist/dom7.modular.js

// Create array-like object

// Return collection with methods

// String

// Other selectors

// Node/element

// Array of elements or instance of Dom

// CONCATENATED MODULE: ./node_modules/swiper/js/swiper.esm.bundle.js

/**
 * Swiper 5.3.0
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * http://swiperjs.com
 *
 * Copyright 2014-2020 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: January 11, 2020
 */

// Classes and attributes

// Get attr

// Set attrs

// Object

// eslint-disable-next-line

// Set value

// Get value

// Transforms

// Events

// Live events

/* jshint validthis:true */

// Dom manipulation

// Iterate over the collection passing elements to `callback`

// Don't bother continuing without a callback

// Iterate over the current collection

// If the callback returns false

// End the loop early

// Return `this` to allow chained DOM operations

// no getter for object

// something got wrong

// Some old versions of Webkit choke when 'none' is passed; pass

// empty string instead in this case

// Latest Chrome and webkits Fix

// No support

// Extend params

// Extend instance methods and props

// Add event listeners

// Module create callback

// Prototype

// Subtract paddings

// reset margins

// Set slides order

// Remove last grid elements depending on width

// Find slides currently in view

// Find new height from highest slide in view

// Update Height

// Visible Slides

// Active classes

// Duplicate to all looped slides

// Next Slide

// Prev Slide

// Normalize slideIndex

// Get real index

// Update progress

// Directions locks

// Update Index

/* eslint no-unused-vars: "off" */

// The current translate is on or after the current snap index, so the choice

// is between the current index and the one after it.

// The current translate is before the current snap index, so the choice

// is between the current index and the one before it.

// Remove duplicated slides

// Fix For Negative Oversliding

// Fix For Positive Oversliding

// iPadOs 13 fix

// Pro 12.9

// Android

// iOS

// iOS 8+ changed UA

// Webview

// Desktop

// Pixel Ratio

// isMoved = true;

// Vertical

// Grab Cursor

// Threshold

// Update active index in free mode

// Velocity

// Update translate

// Return Grab Cursor

// Time diff

// Tap, doubleTap, Click

// this implies that the user stopped moving a finger then released.

// There would be no events with distance zero, so the last event is stale.

// Fix duration

// If freeModeSticky is active and the user ends a swipe with a slow-velocity

// event, then durations can be 20+ seconds to slide one (or zero!) slides.

// It's easy to see this when simulating touch with mouse events. To fix this,

// limit single-slide swipes to the default slide duration. This also has the

// nice side effect of matching slide speed if the user stopped moving before

// lifting finger or mouse vs. moving slowly before lifting the finger/mouse.

// For faster swipes, also apply limits (albeit higher ones).

// Find current slide

// Find current slide size

// Long touches

// Short swipes

// Breakpoints

// Save locks

// Disable locks on resize

// Return locks after resize

// To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).

// Free mode

// Autoheight

// Set wrapper width

// Virtual Translate

// Effects

// 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'

// Slides grid

// in px

// Disable swiper and hide navigation when container not overflow

// Round length

// Touches

// Unique Navigation Elements

// Resistance

// Progress

// Cursor

// Clicks

// Images

// loop

// Swiping/no swiping

// '.swipe-handler',

// Passive Listeners

// NS

// NEW

// Callbacks

// Touch Events

// Prevent Links Clicks

// Resize handler

// Get breakpoint for window width and update parameters

// Get breakpoint for window width

// events

// image already loaded...

// Swiper Instance

// Extend defaults with modules params

// Extend defaults with passed params

// Save Dom lib

// Find el

// Return app instance

// Children needs to return slot items

// Extend Swiper

// Classes

// Slides

// isDirection

// RTL

// Indexes

// Props

// Locks

// Form elements to match

// Last click time

// Velocities

// Install Modules

// Init

// Set breakpoint

// Add Classes

// Create loop

// Update size

// Update slides

// Set Grab Cursor

// Slide To Initial Slide

// Attach events

// Init Flag

// Emit

// Detach events

// Destroy loop

// Cleanup styles

// Detach emitter events

// Emit resize

// Emit orientationchange

// The observerUpdate event should only be triggered

// once despite the number of mutations.  Additional

// triggers are redundant and are very costly

// Observe container

// Observe wrapper

// jquery fix

// Check that swiper should be inside of visible area of window

// This is the only way to test support for the `wheel` event in IE9+.

// Reasonable defaults

// pixelX, pixelY

// Legacy

// side scrolling on FF with DOMMouseScroll

// if user scrolls with shift he wants horizontal scroll

// delta in LINE units

// delta in PAGE units

// Fall-back if spin cannot be determined

// Freemode or scrollContainer:

// If we recently snapped after a momentum scroll, then ignore wheel events

// to give time for the deceleration to finish. Stop ignoring after 500 msecs

// or if it's a new scroll (larger delta or inverse sign as last event before

// an end-of-momentum snap).

// When wheel scrolling starts with sticky (aka snap) enabled, then detect

// the end of a momentum scroll by storing recent (N=15?) wheel events.

// 1. do all N events have decreasing or same (absolute value) delta?

// 2. did all N events arrive in the last M (M=500?) msecs?

// 3. does the earliest event have an (absolute value) delta that's

//    at least P (P=1?) larger than the most recent event's delta?

// 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?

// If 1-4 are "yes" then we're near the end of a momuntum scroll deceleration.

// Snap immediately and ignore remaining wheel events in this scroll.

// See comment above for "remaining wheel events in this scroll" determination.

// If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.

// Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.

// We're at the end of the deceleration of a momentum scroll, so there's no need

// to wait for more events. Snap ASAP on the next tick.

// Also, because there's some remaining momentum we'll bias the snap in the

// direction of the ongoing scroll because it's better UX for the scroll to snap

// in the same direction as the scroll instead of reversing to snap.  Therefore,

// if it's already scrolled more than 20% in the current direction, keep going.

// if we get here, then we haven't detected the end of a momentum scroll, so

// we'll consider a scroll "complete" when there haven't been any wheel events

// for 500ms.

// Emit event

// Return page scroll on edge positions

// Stop autoplay

// Register the new event in a variable which stores the relevant data

// Keep the most recent events

// If it's time to release the scroll:

//   Return now so you don't hit the preventDefault.

// If there is at least one previous recorded event:

//   If direction has changed or

//   if the scroll is quicker than the previous one:

//     Animate the slider.

// Else (this is the first time the wheel is moved):

// If the movement is NOT big enough and

// if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):

//   Don't go any further (avoid insignificant scroll movement).

// If user is scrolling towards the end:

//   If the slider hasn't hit the latest slide or

//   if the slider is a loop and

//   if the slider isn't moving right now:

//     Go to next slide and

//     emit a scroll event.

// Else (the user is scrolling towards the beginning) and

// if the slider hasn't hit the first slide or

// if the slider is a loop and

// if the slider isn't moving right now:

//   Go to prev slide and

//   emit a scroll event.

// If you got here is because an animation has been triggered so store the current time

// Return true to animate scroll on edges

// Update Navigation Buttons

// Render || Update Pagination bullets/items

// Types

// Render Container

// Calc Scale From Multi-touches

// Define if we need image drag

// Toggle Zoom

// Zoom Out

// Zoom In

// Attach/Detach Events

// Scale image

// Move image

// Next Slides

// Prev Slides

// Get the indexes of x1 and x3 (the array indexes before and after given x2):

// xxx: for now i will just save one spline function to to

// this will create an Interpolate function based on the snapGrids

// x is the Grid of the scrolled scroller and y will be the controlled scroller

// it makes sense to create this only once and recall it for the interpolation

// the function does a lot of value caching for performance

// i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid

// but it did not work out

// Navigation

// Pagination

// Set shadows

// if (!$(this).hasClass(swiper.params.slideActiveClass)) return;

// Each slide offset from center

// Fix for ultra small values

// Set correct perspective for IE10

// Find actual thumbs index to slide to

// Activate thumbs

// 'bullets' or 'progressbar' or 'fraction' or 'custom'

/* 105 */

/* 106 */

/* 107 */

/* 108 */

// Don't enum bug & hidden keys

/* 109 */

/* 110 */

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

/* 111 */

// 19.1.2.1 Object.assign(target, source, ...)

// should work with symbols and should have deterministic property order (V8 bug)

/* 112 */

// 7.2.9 SameValue(x, y)

/* 113 */

/* , ...args */

/* 114 */

// fast apply, http://jsperf.lnkit.com/fast-apply/5

/* 115 */

/* 116 */

/* 117 */

/* 118 */

// 20.1.2.3 Number.isInteger(number)

/* 119 */

// 20.2.2.20 Math.log1p(x)

/* 120 */

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

/* 121 */

// call something on iterator step with safe closing on error

// 7.4.6 IteratorClose(iterator, completion)

/* 122 */

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)

/* 123 */

/* 124 */

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

/* = 0 */

/* = 0, end = @length */

/* 125 */

/* 126 */

/* 127 */

// 21.2.5.3 get RegExp.prototype.flags()

/* 128 */

// correct subclassing with @@species support

// unhandled rejections tracking support, NodeJS Promise without it fails @@species test

// may throw

// variable length - can't use forEach

// Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

// unwrap

// constructor polyfill

// 25.4.3.1 Promise(executor)

// eslint-disable-next-line no-unused-vars

// <- awaiting reactions

// <- checked in isUnhandled reactions

// <- state

// <- done

// <- value

// <- rejection state, 0 - default, 1 - handled, 2 - unhandled

// 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)

// 25.4.5.1 Promise.prototype.catch(onRejected)

// statics

// 25.4.4.5 Promise.reject(r)

// 25.4.4.6 Promise.resolve(x)

// 25.4.4.1 Promise.all(iterable)

// 25.4.4.4 Promise.race(iterable)

/* 129 */

// 25.4.1.5 NewPromiseCapability(C)

/* 130 */

/* 131 */

// fast case

// frozen object case

// collection type

// index

// first entry

// last entry

// size

// 23.1.3.1 Map.prototype.clear()

// 23.2.3.2 Set.prototype.clear()

// 23.1.3.3 Map.prototype.delete(key)

// 23.2.3.4 Set.prototype.delete(value)

// 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)

// 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)

/* , that = undefined */

// revert to the last existing entry

// 23.1.3.7 Map.prototype.has(key)

// 23.2.3.7 Set.prototype.has(value)

// change existing entry

// <- index

// <- key

// <- previous entry

// <- next entry

// add to index

// add .keys, .values, .entries, [@@iterator]

// 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11

// kind

// get next entry

// return step by kind

// or finish the iteration

// add [@@species], 23.1.2.2, 23.2.2.2

/* 132 */

// collection id

// leak store for uncaught frozen objects

// 23.3.3.2 WeakMap.prototype.delete(key)

// 23.4.3.3 WeakSet.prototype.delete(value)

// 23.3.3.4 WeakMap.prototype.has(key)

// 23.4.3.4 WeakSet.prototype.has(value)

/* 133 */

// https://tc39.github.io/ecma262/#sec-toindex

/* 134 */

// all object keys, includes non-enumerable and symbols

/* 135 */

// https://github.com/tc39/proposal-string-pad-start-end

/* 136 */

/* 137 */

/* 138 */

/* 139 */

/* 140 */

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */

/* 141 */

/* 142 */

// For browsers use XHR adapter

// For node use HTTP adapter

/* Ignore */

/**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */

/* 143 */

// shim for using process in browser

// cached from whatever global is present so that test runners that stub it

// don't break things.  But we need to wrap it in a try catch in case it is

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// function because try/catches deoptimize in certain engines.

//normal enviroments in sane situations

// if setTimeout wasn't available but was latter defined

// when when somebody has screwed with setTimeout but no I.E. maddness

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// if clearTimeout wasn't available but was latter defined

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// v8 likes predictible objects

// empty string to avoid regexp issues

/* 144 */

// HTTP basic authentication

// Add xsrf header

// This is only done if running in a standard browser environment.

// Specifically not if we're in a web worker, or react-native.

// Set the request timeout in MS

// Listen for ready state

// The request errored out and we didn't get a response, this will be

// handled by onerror instead

// With one exception: request that using file: protocol, most browsers

// will return status as 0 even though it's a successful request

// Prepare the response

// Clean up request

// Handle browser request cancellation (as opposed to a manual cancellation)

// Handle low level network errors

// Real errors are hidden from us by the browser

// onerror should only fire if it's a network error

// Handle timeout

// Add headers to the request

// Add responseType to request if needed

// Remove Content-Type if data is undefined

// Otherwise add header to the request

// Add withCredentials to request if needed

// Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.

// But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.

// Handle progress if needed

// Not all browsers support upload events

// Handle cancellation

// Send the request

/* 145 */

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */

/* 146 */

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */

// eslint-disable-next-line no-param-reassign

/* 147 */

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

/* 148 */

/* 149 */

/*! VelocityJS.org (1.5.2). (C) 2014 Julian Shapiro. MIT @license: en.wikipedia.org/wiki/MIT_License */

/*************************
 Velocity jQuery Shim
 *************************/

/*! VelocityJS.org jQuery Shim (1.0.1). (C) 2014 The jQuery Foundation. MIT @license: en.wikipedia.org/wiki/MIT_License. */

/* This file contains the jQuery functions that Velocity relies on, thereby removing Velocity's dependency on a full copy of jQuery, and allowing it to work in any environment. */

/* These shimmed functions are only used if jQuery isn't present. If both this shim and jQuery are loaded, Velocity defaults to jQuery proper. */

/* Browser support: Using this shim instead of jQuery proper removes support for IE8. */

/***************
   Setup
   ***************/

/* If jQuery is already loaded, there's no point in loading this shim. */

/* jQuery base. */

/********************
   Private Methods
   ********************/

/* jQuery */

/* jshint eqeqeq: false */

/***************
   $ Methods
   ***************/

/* jQuery: Support removed for IE<9. */

/* Custom */

/* $.getData() */

/* $.setData() */

// Cleanup the entire store if no keys are provided.

/* jQuery 1.4.3 */

/* $.merge */

/* Custom: Embed element iteration. */

/******************
   $.fn Methods
   ******************/

/* Just return the element wrapped inside an array; don't proceed with the actual jQuery node wrapping process. */

/* jQuery altered code: Dropped disconnected DOM node checking. */

/* Zepto */

/**********************
   Private Variables
   **********************/

/* For $.data() */

/* For $.queue() */

/* Makes $(node) possible, without having to call init. */

/* Globalize Velocity onto the window, and assign its Utilities property. */

/******************
 Velocity.js
 ******************/

/* CommonJS module. */

/***************
     Summary
     ***************/

/*
     - CSS: CSS stack that works independently from the rest of Velocity.
     - animate(): Core animation method that iterates over the targeted elements and queues the incoming call onto each element individually.
     - Pre-Queueing: Prepare the element for animation by instantiating its data cache and processing the call's options.
     - Queueing: The logic that runs once the call has reached its point of execution in the element's $.queue() stack.
     Most logic is placed here to avoid risking it becoming stale (if the element's properties have changed).
     - Pushing: Consolidation of the tween data followed by its push onto the global in-progress calls container.
     - tick(): The single requestAnimationFrame loop responsible for tweening all in-progress calls.
     - completeCall(): Handles the cleanup process for each Velocity call.
     */

/*********************
     Helper Functions
     *********************/

/* IE detection. Gist: https://gist.github.com/julianshapiro/9098609 */

/* Dynamically set delay on a per-tick basis to match 60fps. */

/* Technique by Erik Moller. MIT license: https://gist.github.com/paulirish/1579671 */

/* rAF shim. Gist: https://gist.github.com/julianshapiro/9497513 */

/**
     * Shim for "fixing" IE's lack of support (IE < 9) for applying slice
     * on host objects like NamedNodeMap, NodeList, and HTMLCollection
     * (technically, since host objects have been implementation-dependent,
     * at least before ES2015, IE hasn't needed to work this way).
     * Also works on strings, fixes IE < 9 to allow an explicit undefined
     * for the 2nd argument (as in Firefox), and prevents errors when
     * called on other DOM objects.
     */

// Can't be used with DOM elements in IE < 9

// Fails in IE < 9

// This will work for genuine arrays, array-like objects, 

// NamedNodeMap (attributes, entities, notations),

// NodeList (e.g., getElementsByTagName), HTMLCollection (e.g., childNodes),

// and will not fail on other DOM objects (as do DOM elements in IE < 9)

// For native Array objects, we use the native slice function

// IE < 9 gets unhappy with an undefined end argument

// For array like object we handle it ourselves.

// Handle negative value for "begin"

// Actual expected size of the slice

/* .indexOf doesn't exist in IE<9 */

/* Unwrap jQuery/Zepto objects. */

/* Determine if variable is an array-like wrapped jQuery, Zepto or similar element, or even a NodeList etc. */

/* NOTE: HTMLFormElements also have a length. */

/*****************
     Dependencies
     *****************/

/*****************
     Constants
     *****************/

/* Container for page-wide Velocity state data. */

/* Detect mobile devices to determine if mobileHA should be turned on. */

/* The mobileHA option's behavior changes on older Android devices (Gingerbread, versions 2.3.3-2.3.7). */

/* Create a cached element for re-use when checking for CSS property prefixes. */

/* Cache every prefix match to avoid repeating lookups. */

/* Cache the anchor used for animating window scrolling. */

/* Cache the browser-specific property names associated with the scroll anchor. */

/* Keep track of whether our RAF tick is running. */

/* Container for every in-progress call to Velocity. */

/* Velocity's custom CSS stack. Made global for unit testing. */

/* Defined below. */

/* A shim of the jQuery utility functions used by Velocity -- provided by Velocity's optional jQuery shim. */

/* Container for the user's custom animation redirects that are referenced by name in place of the properties map argument. */

/* Manually registered by the user. */

/* Attempt to use ES6 Promises by default. Users can override this with a third-party promises library. */

/* Velocity option defaults, which can be overriden by the user. */

/* Advanced: Set to false to prevent property values from being cached between consecutive Velocity-initiated chain calls. */

/* Advanced: Set to false if the promise should always resolve on empty element lists. */

/* A design goal of Velocity is to cache data wherever possible in order to avoid DOM requerying. Accordingly, each element has a data cache. */

/* Store whether this is an SVG element, since its properties are retrieved and updated differently than standard HTML elements. */

/* Keep track of whether the element is currently being animated by Velocity.
           This is used to ensure that property values are not transferred between non-consecutive (stale) calls. */

/* A reference to the element's live computedStyle object. Learn more here: https://developer.mozilla.org/en/docs/Web/API/window.getComputedStyle */

/* Tween data is cached for each animation on the element so that data can be passed across calls --
           in particular, end values are used as subsequent start values in consecutive Velocity calls. */

/* The full root property values of each CSS hook being animated on this element are cached so that:
           1) Concurrently-animating hooks sharing the same root can have their root values' merged into one while tweening.
           2) Post-hook-injection root values can be transferred over to consecutively chained Velocity calls as starting root values. */

/* A cache for transform updates, which must be manually flushed via CSS.flushTransformCache(). */

/* A parallel to jQuery's $.css(), used for getting/setting Velocity's hooked CSS properties. */

/* Velocity-wide animation time remapping for testing purposes. */

/* Set to 1 or 2 (most verbose) to output debug info to console. */

/* Use rAF high resolution timestamp when available */

/* Pause all animations */

/* If we have a queueName and this call is not on that queue, skip */

/* Set call to paused */

/* Pause timers on any currently delayed calls */

/* Resume all animations */

/* Set call to resumed if it was paused */

/* Resume timers on any currently delayed calls */

/*************
     State
     *************/

/* Retrieve the appropriate scroll anchor and property name for the browser: https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollY */

/* Shorthand alias for jQuery's $.data() utility. */

/* Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */

/* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
     then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */

/* Calculate the actual time it takes for this animation to complete with the provided conditions. */

/* Compute the adjusted time delta. */

/* Run the simulation without a duration. */

/* Next/step function .*/

/* Store the position. */

/* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
         computed path and returns a snapshot of the position according to a given percentComplete. */

/* jQuery easings. */

/* Bonus "spring" easing, which is a less exaggerated version of easeInOutElastic. */

/* CSS3 and Robert Penner easings. */

/*****************
     CSS Stack
     *****************/

/* The CSS object is a highly condensed and performant CSS stack that fully replaces jQuery's.
     It handles the validation, getting, and setting of both standard CSS properties and CSS property hooks. */

/* Note: A "CSS" shorthand is aliased so that our code is easier to read. */

/*************
       RegEx
       *************/

/* Unwrap a property value's surrounding text, e.g. "rgba(4, 3, 2, 1)" ==> "4, 3, 2, 1" and "rect(4px 3px 2px 1px)" ==> "4px 3px 2px 1px". */

/* Split a multi-value property into an array of subvalues, e.g. "rgba(4, 3, 2, 1) 4px 3px 2px 1px" ==> [ "rgba(4, 3, 2, 1)", "4px", "3px", "2px", "1px" ]. */

/************
       Lists
       ************/

// relative

// font relative

// viewport relative

// absolute lengths

// angles

/************
       Hooks
       ************/

/* Hooks allow a subproperty (e.g. "boxShadowBlur") of a compound-value CSS property
       (e.g. "boxShadow: X Y Blur Spread Color") to be animated as if it were a discrete property. */

/* Note: Beyond enabling fine-grained property animation, hooking is necessary since Velocity only
       tweens properties with single numeric values; unlike CSS transitions, Velocity does not interpolate compound-values. */

/********************
         Registration
         ********************/

/* Templates are a concise way of indicating which subproperties must be individually registered for each compound-value CSS property. */

/* Each template consists of the compound-value's base name, its constituent subproperty names, and those subproperties' default values. */

/* A "registered" hook is one that has been converted from its template form into a live,
         tweenable property. It contains data to associate it with its root property. */

/* Note: A registered hook looks like this ==> textShadowBlur: [ "textShadow", 3 ],
           which consists of the subproperty's name, the associated root property's name,
           and the subproperty's position in the root's value. */

/* Convert the templates into individual hooks then append them to the registered object above. */

/* Color hooks registration: Colors are defaulted to white -- as opposed to black -- since colors that are
           currently set to "transparent" default to their respective template below when color-animated,
           and white is typically a closer match to transparent than black is. An exception is made for text ("color"),
           which is almost always set closer to black than white. */

/* In IE, color values inside compound-value properties are positioned at the end the value instead of at the beginning.
           Thus, we re-arrange the templates accordingly. */

/* Reposition both the hook's name and its default value to the end of their respective strings. */

/* Replace the existing template for the hook's root property. */

/* Hook registration. */

/* For each hook, register its full name (e.g. textShadowBlur) with its root property (e.g. textShadow)
               and the hook's position in its template's default value string. */

/*****************************
         Injection and Extraction
         *****************************/

/* Look up the root property associated with the hook (e.g. return "textShadow" for "textShadowBlur"). */

/* Since a hook cannot be set directly (the browser won't recognize it), style updating for hooks is routed through the hook's root property. */

/* Convert any rootPropertyValue, null or otherwise, into a space-delimited list of hook values so that
         the targeted hook can be injected or extracted at its standard position. */

/* If the rootPropertyValue is wrapped with "rgb()", "clip()", etc., remove the wrapping to normalize the value before manipulation. */

/* If rootPropertyValue is a CSS null-value (from which there's inherently no hook value to extract),
           default to the root's default value as defined in CSS.Hooks.templates. */

/* Note: CSS null-values include "none", "auto", and "transparent". They must be converted into their
           zero-values (e.g. textShadow: "none" ==> textShadow: "0px 0px 0px black") for hook manipulation to proceed. */

/* Extracted the hook's value from its root property's value. This is used to get the starting value of an animating hook. */

/* Split rootPropertyValue into its constituent hook values then grab the desired hook at its standard position. */

/* If the provided fullHookName isn't a registered hook, return the rootPropertyValue that was passed in. */

/* Inject the hook's value into its root property's value. This is used to piece back together the root property
         once Velocity has updated one of its individually hooked values through tweening. */

/* Split rootPropertyValue into its individual hook values, replace the targeted value with hookValue,
             then reconstruct the rootPropertyValue string. */

/*******************
       Normalizations
       *******************/

/* Normalizations standardize CSS property manipulation by pollyfilling browser-specific implementations (e.g. opacity)
       and reformatting special properties (e.g. clip, rgba) to look like standard ones. */

/* Normalizations are passed a normalization target (either the property's name, its extracted value, or its injected value),
         the targeted element (which may need to be queried), and the targeted property value. */

/* Clip needs to be unwrapped and stripped of its commas during extraction. */

/* If Velocity also extracted this value, skip extraction. */

/* Remove the "rect()" wrapper. */

/* Clip needs to be re-wrapped during injection. */

/* If extracted is NaN, meaning the value isn't already extracted. */

/* If the filter string had a blur component, return just the blur value and unit type. */

/* Blur needs to be re-wrapped during injection. */

/* For the blur effect to be fully de-applied, it needs to be set to "none" instead of 0. */

/* <=IE8 do not support the standard opacity property. They use filter:alpha(opacity=INT) instead. */

/* <=IE8 return a "filter" value of "alpha(opacity=\d{1,3})".
                   Extract the value and convert it to a decimal value to match the standard CSS opacity property's formatting. */

/* Convert to decimal value. */

/* Setting the filter property on elements with certain font property combinations can result in a
                   highly unappealing ultra-bolding effect. There's no way to remedy this throughout a tween, but dropping the
                   value altogether (when opacity hits 1) at leasts ensures that the glitch is gone post-tweening. */

/* Opacified elements are required to have their zoom property set to a non-zero value. */

/* With all other browsers, normalization is not required; return the same values that were passed in. */

/*****************************
         Batched Registrations
         *****************************/

/* Note: Batched normalizations extend the CSS.Normalizations.registered object. */

/*****************
           Transforms
           *****************/

/* Transforms are the subproperties contained by the CSS "transform" property. Transforms must undergo normalization
           so that they can be referenced in a properties map by their individual names. */

/* Note: When transforms are "set", they are actually assigned to a per-element transformCache. When all transform
           setting is complete complete, CSS.flushTransformCache() must be manually called to flush the values to the DOM.
           Transform setting is batched in this way to improve performance: the transform style only needs to be updated
           once when multiple transform subproperties are being animated simultaneously. */

/* Note: IE9 and Android Gingerbread have support for 2D -- but not 3D -- transforms. Since animating unsupported
           transform properties results in the browser ignoring the *entire* transform string, we prevent these 3D values
           from being normalized for these browsers so that tweening skips these properties altogether
           (since it will ignore them as being unsupported by the browser.) */

/* Note: Since the standalone CSS "perspective" property and the CSS transform "perspective" subproperty
             share the same name, the latter is given a unique token within Velocity: "transformPerspective". */

/* Wrap the dynamically generated normalization function in a new scope so that transformName's value is
             paired with its respective function. (Otherwise, all functions would take the final for loop's transformName.) */

/* The normalized property name is the parent "transform" property -- the property that is actually set in CSS. */

/* Transform values are cached onto a per-element transformCache object. */

/* If this transform has yet to be assigned a value, return its null value. */

/* If an individual transform property contains an unsupported unit type, the browser ignores the *entire* transform property.
                     Thus, protect users from themselves by skipping setting for transform values supplied with invalid unit types. */

/* Switch on the base transform type; ignore the axis by removing the last letter from the transform's name. */

/* Whitelist unit types for each transform. */

/* Since an axis-free "scale" property is supported as well, a little hack is used here to detect it by chopping off its last letter. */

/* Chrome on Android has a bug in which scaled elements blur if their initial scale
                         value is below 1 (which can happen with forcefeeding). Thus, we detect a yet-unset scale property
                         and ensure that its first value is always 1. More info: http://stackoverflow.com/questions/10417890/css3-animations-with-transform-causes-blurred-elements-on-webkit/10417962#10417962 */

/* Although the value is set on the transformCache object, return the newly-updated value for the calling code to process as normal. */

/* As per the CSS spec, wrap the value in parentheses. */

/*************
           Colors
           *************/

/* Since Velocity only animates a single numeric value per property, color animation is achieved by hooking the individual RGBA components of CSS color properties.
           Accordingly, color values must be normalized (e.g. "#ff0000", "red", and "rgb(255, 0, 0)" ==> "255 0 0 1") so that their components can be injected/extracted by CSS.Hooks logic. */

/* Wrap the dynamically generated normalization function in a new scope so that colorName's value is paired with its respective function.
             (Otherwise, all functions would take the final for loop's colorName.) */

/* Note: In IE<=8, which support rgb but not rgba, color properties are reverted to rgb by stripping off the alpha component. */

/* Convert all color values into the rgb format. (Old IE can return hex values and color names instead of rgb/rgba.) */

/* If the color is already in its hookable form (e.g. "255 255 255 1") due to having been previously extracted, skip extraction. */

/* Convert color names to rgb. */

/* Convert hex values to rgb. */

/* Remove the surrounding "rgb/rgba()" string then replace commas with spaces and strip
                       repeated spaces (in case the value included spaces to begin with). */

/* So long as this isn't <=IE8, add a fourth (alpha) component if it's missing and default it to 1 (visible). */

/* If we have a pattern then it might already have the right values */

/* If this is IE<=8 and an alpha component exists, strip it off. */

/* Otherwise, add a fourth (alpha) component if it's missing and default it to 1 (visible). */

/* Re-insert the browser-appropriate wrapper("rgb/rgba()"), insert commas, and strip off decimal units
                     on all values but the fourth (R, G, and B only accept whole numbers). */

/**************
           Dimensions
           **************/

/* in box-sizing mode, the CSS width / height accessors already give the outerWidth / outerHeight. */

/************************
       CSS Property Names
       ************************/

/* Camelcase a property name into its JavaScript notation (e.g. "background-color" ==> "backgroundColor").
         Camelcasing is used to normalize property names between and across calls. */

/* For SVG elements, some properties (namely, dimensional ones) are GET/SET via the element's HTML attributes (instead of via CSS styles). */

/* Certain browsers require an SVG transform to be applied as an attribute. (Otherwise, application via CSS is preferable due to 3D support.) */

/* Determine whether a property should be set with a vendor prefix. */

/* If a prefixed version of the property exists, return it. Otherwise, return the original property name.
         If the property is not at all supported by the browser, return a false flag. */

/* If this property has already been checked, return the cached value. */

/* Check if the browser supports this property as prefixed. */

/* Cache the match. */

/* If the browser doesn't support this property in any form, include a false flag so that the caller can decide how to proceed. */

/************************
       CSS Property Values
       ************************/

/* Hex to RGB conversion. Copyright Tim Down: http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb */

/* The browser defaults CSS values that have not been set to either 0 or one of several possible null-value strings.
           Thus, we check for both falsiness and these special strings. */

/* Null-value checking is performed to default the special strings to 0 (for the sake of tweening) or their hook
           templates as defined as CSS.Hooks (for the sake of hook injection/extraction). */

/* Note: Chrome returns "rgba(0, 0, 0, 0)" for an undefined color whereas IE returns "transparent". */

/* Retrieve a property's default unit type. Used for assigning a unit type when one is not supplied by the user. */

/* HTML elements default to an associated display type when they're not set to display:none. */

/* Note: This function is used for correctly setting the non-"none" display value in certain Velocity redirects, such as fadeIn/Out. */

/* The class add/remove functions are used to temporarily apply a "velocity-animating" class to elements while they're animating. */

// Element.className is around 15% faster then set/getAttribute

// Work around for IE strict mode animating SVG - and anything else that doesn't behave correctly - the same way jQuery does it

// TODO: Need some jsperf tests on performance - can we get rid of the regex and maybe use split / array manipulation?

/****************************
       Style Getting & Setting
       ****************************/

/* The singular getPropertyValue, which routes the logic for all normalizations, hooks, and standard CSS properties. */

/* Get an element's computed property value. */

/* Note: Retrieving the value of a CSS property cannot simply be performed by checking an element's
         style attribute (which only reflects user-defined values). Instead, the browser must be queried for a property's
         *computed* value. You can read more about getComputedStyle here: https://developer.mozilla.org/en/docs/Web/API/window.getComputedStyle */

/* When box-sizing isn't set to border-box, height and width style values are incorrectly computed when an
           element's scrollbars are visible (which expands the element's dimensions). Thus, we defer to the more accurate
           offsetHeight/Width property, which includes the total dimensions for interior, border, padding, and scrollbar.
           We subtract border and padding to get the sum of interior + scrollbar. */

/* IE<=8 doesn't support window.getComputedStyle, thus we defer to jQuery, which has an extensive array
           of hacks to accurately retrieve IE8 property values. Re-implementing that logic here is not worth bloating the
           codebase for a dying browser. The performance repercussions of using jQuery here are minimal since
           Velocity is optimized to rarely (and sometimes never) query the DOM. Further, the $.css() codepath isn't that slow. */

/* GET */

/* All other browsers support getComputedStyle. The returned live object reference is cached onto its
             associated element so that it does not need to be refetched upon every GET. */

/* Browsers do not return height and width values for elements that are set to display:"none". Thus, we temporarily
             toggle display to the element type's default value. */

/* For elements that Velocity hasn't been called on directly (e.g. when Velocity queries the DOM on behalf
             of a parent of an element its animating), perform a direct getComputedStyle lookup since the object isn't cached. */

/* IE and Firefox do not return a value for the generic borderColor -- they only return individual values for each border side's color.
             Also, in all browsers, when border colors aren't all the same, a compound value is returned that Velocity isn't setup to parse.
             So, as a polyfill for querying individual border side colors, we just return the top border's color and animate all borders from that value. */

/* IE9 has a bug in which the "filter" property must be accessed from computedStyle using the getPropertyValue method
             instead of a direct property lookup. The getPropertyValue method is slower than a direct lookup, which is why we avoid it by default. */

/* Fall back to the property's style value (if defined) when computedValue returns nothing,
             which can happen when the element hasn't been painted. */

/* For top, right, bottom, and left (TRBL) values that are set to "auto" on elements of "fixed" or "absolute" position,
           defer to jQuery for converting "auto" to a numeric value. (For elements with a "static" or "relative" position, "auto" has the same
           effect as being set to 0, so no conversion is necessary.) */

/* An example of why numeric conversion is necessary: When an element with "position:absolute" has an untouched "left"
           property, which reverts to "auto", left's value is 0 relative to its parent element, but is often non-zero relative
           to its *containing* (not parent) element, which is the nearest "position:relative" ancestor or the viewport (and always the viewport in the case of "position:fixed"). */

/* For absolute positioning, jQuery's $.position() only returns values for top and left;
             right and bottom will have their "auto" value reverted to 0. */

/* Note: A jQuery object must be created here since jQuery doesn't have a low-level alias for $.position().
             Not a big deal since we're currently in a GET batch anyway. */

/* Note: jQuery strips the pixel unit from its returned values; we re-add it here to conform with computePropertyValue's behavior. */

/* If this is a hooked property (e.g. "clipLeft" instead of the root property of "clip"),
         extract the hook's value from a normalized rootPropertyValue using CSS.Hooks.extractValue(). */

/* If a cached rootPropertyValue wasn't passed in (which Velocity always attempts to do in order to avoid requerying the DOM),
           query the DOM for the root property's value. */

/* Since the browser is now being directly queried, use the official post-prefixing property name for this lookup. */

/* If this root has a normalization registered, peform the associated normalization extraction. */

/* Extract the hook's value. */

/* Transform values are calculated via normalization extraction (see below), which checks against the element's transformCache.
           At no point do transform GETs ever actually query the DOM; initial stylesheet values are never processed.
           This is because parsing 3D transform matrices is not always accurate and would bloat our codebase;
           thus, normalization extraction defaults initial transform values to their zero-values (e.g. 1 for scaleX and 0 for translateX). */

/* If the value is a CSS null-value and this property has a hook template, use that zero-value template so that hooks can be extracted from it. */

/* If a (numeric) value wasn't produced via hook extraction or normalization, query the DOM. */

/* For SVG elements, dimensional properties (which SVGAttribute() detects) are tweened via
           their HTML attribute values instead of their CSS style values. */

/* Since the height/width attribute values must be set manually, they don't reflect computed values.
             Thus, we use use getBBox() to ensure we always get values for elements with undefined height/width attributes. */

/* Firefox throws an error if .getBBox() is called on an SVG that isn't attached to the DOM. */

/* Otherwise, access the attribute value directly. */

/* Since property lookups are for animation purposes (which entails computing the numeric delta between start and end values),
         convert CSS null-values to an integer of value 0. */

/* The singular setPropertyValue, which routes the logic for all normalizations, hooks, and standard CSS properties. */

/* In order to be subjected to call options and element queueing, scroll animation is routed through Velocity as if it were a standard CSS property. */

/* If a container option is present, scroll the container instead of the browser window. */

/* Transforms (translateX, rotateZ, etc.) are applied to a per-element transformCache object, which is manually flushed via flushTransformCache().
           Thus, for now, we merely cache transforms being SET. */

/* Perform a normalization injection. */

/* Note: The normalization logic handles the transformCache updating. */

/* Inject hooks. */

/* If a cached rootPropertyValue was not provided, query the DOM for the hookRoot's current value. */

/* Normalize names and values. */

/* A try/catch is used for IE<=8, which throws an error when "invalid" CSS values are set, e.g. a negative width.
             Try/catch is avoided for other browsers since it incurs a performance overhead. */

/* Assign the appropriate vendor prefix before performing an official style update. */

/* SVG elements have their dimensional properties (width, height, x, y, cx, etc.) applied directly as attributes instead of as styles. */

/* Note: IE8 does not support SVG elements, so it's okay that we skip it for SVG animation. */

/* Note: For SVG attributes, vendor-prefixed property names are never used. */

/* Note: Not all CSS properties can be animated via attributes, but the browser won't throw an error for unsupported properties. */

/* Return the normalized property name and value in case the caller wants to know how these values were modified before being applied to the DOM. */

/* To increase performance by batching transform updates into a single SET, transforms are not directly applied to an element until flushTransformCache() is called. */

/* Note: Velocity applies transform properties in the same order that they are chronogically introduced to the element's CSS styles. */

/* Certain browsers require that SVG transforms be applied as an attribute. However, the SVG transform attribute takes a modified version of CSS's transform string
         (units are dropped and, except for skewX/Y, subproperties are merged into their master property -- e.g. scaleX and scaleY are merged into scale(X Y). */

/* Since transform values are stored in their parentheses-wrapped form, we use a helper function to strip out their numeric values.
           Further, SVG transform properties only take unitless (representing pixels) values, so it's okay that parseFloat() strips the unit suffixed to the float value. */

/* If the scale property is set (non-1), use that value for the scaleX and scaleY values
             (this behavior mimics the result of animating all these properties at once on HTML elements). */

/* Note: SVG's rotate transform takes three values: rotation degrees followed by the X and Y values
             defining the rotation's origin point. We ignore the origin values (default them to 0). */

/* Create an object to organize all the transforms that we'll apply to the SVG element. To keep the logic simple,
           we process *all* transform properties -- even those that may not be explicitly applied (since they default to their zero-values anyway). */

/* Iterate through the transform properties in the user-defined property map order.
           (This mimics the behavior of non-SVG transform animation.) */

/* Except for with skewX/Y, revert the axis-specific transform subproperties to their axis-free master
             properties so that they match up with SVG's accepted transform properties. */

/* Check that we haven't yet deleted the property from the SVGTransforms container. */

/* Append the transform property in the SVG-supported transform format. As per the spec, surround the space-delimited values in parentheses. */

/* After processing an SVG transform property, delete it from the SVGTransforms container so we don't
               re-insert the same master property if we encounter another one of its axis-specific properties. */

/* Transform properties are stored as members of the transformCache object. Concatenate all the members into a string. */

/* Transform's perspective subproperty must be set first in order to take effect. Store it temporarily. */

/* IE9 only supports one rotation type, rotateZ, which it refers to as "rotate". */

/* If present, set the perspective subproperty first. */

/* Register hooks and normalizations. */

/* Allow hook setting in the same fashion as jQuery's $.css(). */

/* Get property value. If an element set was passed in, only return the value for the first element. */

/* Initialize Velocity's per-element data cache if this element hasn't previously been animated. */

/* Set property value. */

/* sPV returns an array of the normalized propertyName/propertyValue pair used to update the DOM. */

/* Transform properties don't automatically set. They have to be flushed to the DOM. */

/*****************
     Animation
     *****************/

/******************
       Call Chain
       ******************/

/* Logic for determining what to return to the call stack when exiting out of Velocity. */

/* If we are using the utility function, attempt to return this call's promise. If no promise library was detected,
         default to null instead of returning the targeted elements so that utility function's return value is standardized. */

/*************************
       Arguments Assignment
       *************************/

/* To allow for expressive CoffeeScript code, Velocity supports an alternative syntax in which "elements" (or "e"), "properties" (or "p"), and "options" (or "o")
       objects are defined on a container object that's passed in as Velocity's sole argument. */

/* Note: Some browsers automatically populate arguments with a "properties" object. We detect it by checking for its default "names" property. */

/* Whether Velocity was called via the utility function (as opposed to on a jQuery/Zepto object). */

/* When Velocity is called via the utility function ($.Velocity()/Velocity()), elements are explicitly
       passed in as the first parameter. Thus, argument positioning varies. We normalize them here. */

/* Detect jQuery/Zepto elements being animated via the $.fn method. */

/***************
       Promises
       ***************/

/* If this call was made via the utility function (which is the default method of invocation when jQuery/Zepto are not being used), and if
       promise support was detected, create a promise object for this call and store references to its resolver and rejecter methods. The resolve
       method is used when a call completes naturally or is prematurely stopped by the user. In both cases, completeCall() handles the associated
       call cleanup and promise resolving logic. The reject method is used when an invalid set of arguments is passed into a Velocity call. */

/* Note: Velocity employs a call-based queueing architecture, which means that stopping an animating element actually stops the full call that
       triggered it -- not that one element exclusively. Similarly, there is one promise per call, and all elements targeted by a Velocity call are
       grouped together for the purposes of resolving and rejecting a promise. */

/* The length of the element set (in the form of a nodeList or an array of elements) is defaulted to 1 in case a
       single raw DOM element is passed in (which doesn't contain a length property). */

/***************************
       Argument Overloading
       ***************************/

/* Support is included for jQuery's argument overloading: $.animate(propertyMap [, duration] [, easing] [, complete]).
       Overloading is detected by checking for the absence of an object being passed into options. */

/* Note: The stop/finish/pause/resume actions do not accept animation options, and are therefore excluded from this check. */

/* The utility function shifts all arguments one position to the right, so we adjust for that offset. */

/* Iterate through all options arguments */

/* Treat a number as a duration. Parse it out. */

/* Note: The following RegEx will return true if passed an array with a number as its first item.
           Thus, arrays are skipped from this check. */

/*********************
       Action Detection
       *********************/

/* Velocity's behavior is categorized into "actions": Elements can either be specially scrolled into view,
       or they can be started, stopped, paused, resumed, or reversed . If a literal or referenced properties map is passed in as Velocity's
       first argument, the associated action is "start". Alternatively, "scroll", "reverse", "pause", "resume" or "stop" can be passed in 
       instead of a properties map. */

/*******************
           Action: Pause
           *******************/

/* Handle delay timers */

/* Since pause creates no new tweens, exit out of Velocity. */

/* Pause and Resume are call-wide (not on a per element basis). Thus, calling pause or resume on a 
           single element will cause any calls that containt tweens for that element to be paused/resumed
           as well. */

/* Iterate through all calls and pause any that contain any of our elements */

/* Inactive calls are set to false by the logic inside completeCall(). Skip them. */

/* Iterate through the active call's targeted elements. */

/* Iterate through the calls targeted by the stop command. */

/* Check that this call was applied to the target element. */

/* Once we match an element, we can bounce out to the next call entirely */

/* Proceed to check next call if we have already matched */

/* Since resume creates no new tweens, exit out of Velocity. */

/*******************
           Action: Resume
           *******************/

/* Pause and Resume are call-wide (not on a per elemnt basis). Thus, calling pause or resume on a 
           single element will cause any calls that containt tweens for that element to be paused/resumed
           as well. */

/* Skip any calls that have never been paused */

/* Flag a pause object to be resumed, which will occur during the next tick. In
                     addition, the pause object will at that time be deleted */

/*******************
           Action: Stop
           *******************/

/* Clear the currently-active delay on each targeted element. */

/* Stop the timer from triggering its cached next() function. */

/* Manually call the next() function so that the subsequent queue items can progress. */

/* If we want to finish everything in the queue, we have to iterate through it
             and call each function. This will make them active calls below, which will
             cause them to be applied via the duration setting. */

/* Iterate through the items in the element's queue. */

/* The queue array can contain an "inprogress" string, which we skip. */

/* Clearing the $.queue() array is achieved by resetting it to []. */

/* When the stop action is triggered, the elements' currently active call is immediately stopped. The active call might have
           been applied to multiple elements, in which case all of the call's elements will be stopped. When an element
           is stopped, the next item in its animation queue is immediately triggered. */

/* An additional argument may be passed in to clear an element's remaining queued calls. Either true (which defaults to the "fx" queue)
           or a custom queue string can be passed in. */

/* Note: The stop command runs prior to Velocity's Queueing phase since its behavior is intended to take effect *immediately*,
           regardless of the element's current queue state. */

/* Iterate through every active call. */

/* Since we're stopping, and not proceeding with queueing, exit out of Velocity. */

/* If true was passed in as a secondary argument, clear absolutely all calls on this element. Otherwise, only
                 clear calls associated with the relevant queue. */

/* Call stopping logic works as follows:
                 - options === true --> stop current default queue calls (and queue:false calls), including remaining queued ones.
                 - options === undefined --> stop current queue:"" call and all queue:false calls.
                 - options === false --> stop only queue:false calls.
                 - options === "custom" --> stop current queue:"custom" call, including remaining queued ones (there is no functionality to only clear the currently-running queue:"custom" call). */

/* Optionally clear the remaining queued calls. If we're doing "finishAll" this won't find anything,
                     due to the queue-clearing above. */

/* Pass the item's callback a flag indicating that we want to abort from the queue call.
                           (Specifically, the queue will resolve the call's associated promise then abort.)  */

/* Since "reverse" uses cached start values (the previous call's endValues), these values must be
                       changed to reflect the final value that the elements were actually tweened to. */

/* Note: If only queue:false/queue:"custom" animations are currently running on an element, it won't have a tweensContainer
                       object. Also, queue:false/queue:"custom" animations can't be reversed. */

/* To get active tweens to finish immediately, we forcefully shorten their durations to 1ms so that
                       they finish upon the next rAf tick then proceed with normal call completion logic. */

/* Prematurely call completeCall() on each matched active call. Pass an additional flag for "stop" to indicate
           that the complete callback and display:none setting should be skipped since we're completing prematurely. */

/* Immediately resolve the promise associated with this stop call since stop runs synchronously. */

/* Treat a non-empty plain object as a literal properties map. */

/* If the backwards option was passed in, reverse the element set so that elements animate from the last to the first. */

/* Since the animation logic resides within the redirect's own code, abort the remainder of this call.
             (The performance overhead up to this point is virtually non-existant.) */

/* Note: The jQuery call chain is kept intact by returning the complete element set. */

/* Individually trigger the redirect for each element in the set to prevent users from having to handle iteration logic in their redirect. */

/* If the stagger option was passed in, successively delay each element by the stagger value (in ms). Retain the original delay value. */

/* If the drag option was passed in, successively increase/decrease (depending on the presense of opts.backwards)
               the duration of each element's animation, using floors to prevent producing very short durations. */

/* Default the duration of UI pack effects (callouts and transitions) to 1000ms instead of the usual default duration of 400ms. */

/* For each element, take the greater duration of: A) animation completion percentage relative to the original duration,
                 B) 75% of the original duration, or C) a 200ms fallback (in case duration is already set to a low value).
                 The end result is a baseline of 75% of the redirect's duration that increases/decreases as the end of the element set is approached. */

/* Pass in the call's opts object so that the redirect can optionally extend it. It defaults to an empty object instead of null to
               reduce the opts checking logic required inside the redirect. */

/**************************
       Call-Wide Variables
       **************************/

/* A container for CSS unit conversion ratios (e.g. %, rem, and em ==> px) that is used to cache ratios across all elements
       being animated in a single Velocity call. Calculating unit ratios necessitates DOM querying and updating, and is therefore
       avoided (via caching) wherever possible. This container is call-wide instead of page-wide to avoid the risk of using stale
       conversion metrics across Velocity animations that are not immediately consecutively chained. */

/* A container for all the ensuing tween data and metadata associated with this call. This container gets pushed to the page-wide
       Velocity.State.calls array that is processed during animation ticking. */

/**************************
       Element Set Iteration
       **************************/

/* If the "nodeType" property exists on the elements variable, we're animating a single element.
       Place it in an array so that $.each() can iterate over it. */

/* Ensure each element in a set has a nodeType (is a real element) to avoid throwing errors. */

/******************
       Option: Loop
       ******************/

/* The loop option accepts an integer indicating how many times the element should loop between the values in the
       current call's properties map and the element's property values prior to this call. */

/* Note: The loop option's logic is performed here -- after element processing -- because the current call needs
       to undergo its queue insertion prior to the loop option generating its series of constituent "reverse" calls,
       which chain after the current call. Two reverse calls (two "alternations") constitute one loop. */

/* Double the loop count to convert it into its appropriate number of "reverse" calls.
         Subtract 1 from the resulting value since the current call is included in the total alternation count. */

/* Since the logic for the reverse action occurs inside Queueing and therefore this call's options object
           isn't parsed until then as well, the current call's delay option must be explicitly passed into the reverse
           call so that the delay logic that occurs inside *Pre-Queueing* can process it. */

/* If a complete callback was passed into this call, transfer it to the loop redirect's final "reverse" call
           so that it's triggered when the entire redirect is complete (and not when the very first animation is complete). */

/***************
       Chaining
       ***************/

/* Return the elements back to the call chain, with wrapped elements taking precedence in case Velocity was called via the $.fn. extension. */

/************************
       Element Processing
       ************************/

/* Element processing consists of three parts -- data processing that cannot go stale and data processing that *can* go stale (i.e. third-party style modifications):
       1) Pre-Queueing: Element-wide variables, including the element's data storage, are instantiated. Call options are prepared. If triggered, the Stop action is executed.
       2) Queueing: The logic that runs once this call has reached its point of execution in the element's $.queue() stack. Most logic is placed here to avoid risking it becoming stale.
       3) Pushing: Consolidation of the tween data followed by its push onto the global in-progress calls container.
       `elementArrayIndex` allows passing index of the element in the original array to value functions.
       If `elementsIndex` were used instead the index would be determined by the elements' per-element queue.
       */

/*************************
         Part I: Pre-Queueing
         *************************/

/***************************
         Element-Wide Variables
         ***************************/

/* The runtime opts object is the extension of the current call's options and Velocity's page-wide option defaults. */

/* A container for the processed data associated with each property in the propertyMap.
         (Each property in the map produces its own "tween".) */

/******************
         Element Init
         ******************/

/*********************
         Option: Duration
         *********************/

/* Support for jQuery's named durations. */

/******************
         Option: Delay
         ******************/

/* Since queue:false doesn't respect the item's existing queue, we avoid injecting its delay here (it's set later on). */

/* Note: Velocity rolls its own delay function since jQuery doesn't have a utility alias for $.fn.delay()
         (and thus requires jQuery element creation, which we avoid since its overhead includes DOM querying). */

/* Do not continue with animation queueing. */

/* This is a flag used to indicate to the upcoming completeCall() function that this queue entry was initiated by Velocity. See completeCall() for further details. */

/* The ensuing queue item (which is assigned to the "next" argument that $.queue() automatically passes in) will be triggered after a setTimeout delay.
             The setTimeout is stored so that it can be subjected to clearTimeout() if this animation is prematurely stopped via Velocity's "stop" command, and
             delayBegin/delayTime is used to ensure we can "pause" and "resume" a tween that is still mid-delay. */

/* Temporarily store delayed elements to facilite access for global pause/resume */

/* Clear the temporary element */

/* Finally, issue the call */

/* Remove the potential "ms" suffix and default to 1 if the user is attempting to set a duration of 0 (in order to produce an immediate style change). */

/************************
         Global Option: Mock
         ************************/

/***********************
         Part II: Queueing
         ***********************/

/* When a set of elements is targeted by a Velocity call, the set is broken up and each element has the current Velocity call individually queued onto it.
         In this way, each element's existing queue is respected; some elements may already be animating and accordingly should not have this current Velocity call triggered immediately. */

/* In each queue, tween data is processed for each animating property then pushed onto the call-wide calls array. When the last element in the set has had its tweens processed,
         the call array is pushed to Velocity.State.calls for live processing by the requestAnimationFrame tick. */

/*******************
           Option: Begin
           *******************/

/* The begin callback is fired once per call -- not once per elemenet -- and is passed the full raw DOM element set as both its context and its first argument. */

/* We throw callbacks in a setTimeout so that thrown errors don't halt the execution of Velocity itself. */

/*****************************************
           Tween Data Construction (for Scroll)
           *****************************************/

/* Note: In order to be subjected to chaining and animation options, scroll's tweening is routed through Velocity as if it were a standard CSS property animation. */

/* The scroll action uniquely takes an optional "offset" option -- specified in pixels -- that offsets the targeted scroll position. */

/* Scroll also uniquely takes an optional "container" option, which indicates the parent element that should be scrolled --
             as opposed to the browser window itself. This is useful for scrolling toward an element that's inside an overflowing parent element. */

/* Ensure that either a jQuery object or a raw DOM element was passed in. */

/* Extract the raw DOM element from the jQuery wrapper. */

/* $.position() values are relative to the container's currently viewable area (without taking into account the container's true dimensions
                 -- say, for example, if the container was not overflowing). Thus, the scroll end value is the sum of the child element's position *and*
                 the scroll container's current scroll position. */

/* Note: Unlike other properties in Velocity, the browser's scroll position is never cached since it so frequently changes
                 (due to the user's natural interaction with the page). */

/* If the window itself is being scrolled -- not a containing element -- perform a live scroll position lookup using
               the appropriate cached property names (which differ based on browser type). */

/* When scrolling the browser window, cache the alternate axis's current value since window.scrollTo() doesn't let us change only one value at a time. */

/* Unlike $.position(), $.offset() values are relative to the browser window's true dimensions -- not merely its currently viewable area --
               and therefore end values do not need to be compounded onto current values. */

/* Since there's only one format that scroll's associated tweensContainer can take, we create it manually. */

/* Abort if there is no prior animation data to reverse to. */

/* Dequeue the element so that this queue entry releases itself immediately, allowing subsequent queue entries to run. */

/*****************************************
             Tween Data Construction (for Start)
             *****************************************/

/* Manipulate the previous tweensContainer by replacing its end values and currentValues with its start values. */

/*********************
               Options Parsing
               *********************/

/* If the element was hidden via the display option in the previous call,
               revert display to "auto" prior to reversal so that the element is visible again. */

/* If the loop option was set in the previous call, disable it so that "reverse" calls aren't recursively generated.
               Further, remove the previous call's callback options; typically, users do not want these to be refired. */

/* Since we're extending an opts object that has already been extended with the defaults options object,
               we remove non-explicitly-defined properties that are auto-assigned values. */

/* The opts object used for reversal is an extension of the options object optionally passed into this
               reverse call plus the options used in the previous Velocity call. */

/*************************************
               Tweens Container Reconstruction
               *************************************/

/* Create a deepy copy (indicated via the true flag) of the previous call's tweensContainer. */

/* In addition to tween data, tweensContainers contain an element property that we ignore here. */

/* Easing is the only option that embeds into the individual tween data (since it can be defined on a per-property basis).
                   Accordingly, every property's easing value must be updated when an options object is passed in with a reverse call.
                   The side effect of this extensibility is that all per-property easing values are forcefully reset to the new value. */

/* The per-element isAnimating flag is used to indicate whether it's safe (i.e. the data isn't stale)
             to transfer over end values to use as start values. If it's set to true and there is a previous
             Velocity call to pull values from, do so. */

/*************************
             Value Transferring
             *************************/

/* If this queue entry follows a previous Velocity-initiated queue entry *and* if this entry was created
             while the element was in the process of being animated by Velocity, then this current call is safe to use
             the end values from the prior call as its start values. Velocity attempts to perform this value transfer
             process whenever possible in order to avoid requerying the DOM. */

/* If values aren't transferred from a prior call and start values were not forcefed by the user (more on this below),
             then the DOM is queried for the element's current values as a last resort. */

/* Note: Conversely, animation reversal (and looping) *always* perform inter-call value transfers; they never requery the DOM. */

/***************************
             Tween Data Calculation
             ***************************/

/* This function parses property data and defaults endValue, easing, and startValue as appropriate. */

/* Property map values can either take the form of 1) a single value representing the end value,
             or 2) an array in the form of [ endValue, [, easing] [, startValue] ].
             The optional third parameter is a forcefed startValue to be used instead of querying the DOM for
             the element's current value. Read Velocity's docmentation to learn more about forcefeeding: VelocityJS.org/#forcefeeding */

/* If we have a function as the main argument then resolve it first, in case it returns an array that needs to be split */

/* Allow startValue to be left as undefined to indicate to the ensuing code that its value was not forcefed. */

/* Handle the array format, which can be structured as one of three potential overloads:
               A) [ endValue, easing, startValue ], B) [ endValue, easing ], or C) [ endValue, startValue ] */

/* endValue is always the first item in the array. Don't bother validating endValue's value now
                 since the ensuing property cycling logic does that. */

/* Two-item array format: If the second item is a number, function, or hex string, treat it as a
                 start value since easings can only be non-hex strings or arrays. */

/* Don't bother validating startValue's value now since the ensuing property cycling logic inherently does that. */

/* Handle the single-value format. */

/* Default to the call's easing if a per-property easing type was not defined. */

/* If functions were passed in as values, pass the function the current element as its context,
               plus the element's index and the element set's size as arguments. Then, assign the returned value. */

/* In case this property is a hook, there are circumstances where we will intend to work on the hook's root property and not the hooked subproperty. */

/* Parse out endValue, easing, and startValue from the property's data. */

/**************************
               Start Value Sourcing
               **************************/

/* Other than for the dummy tween property, properties that are not supported by the browser (and do not have an associated normalization) will
               inherently produce no style changes when set, so they are skipped in order to decrease animation tick overhead.
               Property support is determined via prefixCheck(), which returns a false flag when no supported is detected. */

/* Note: Since SVG elements have some of their properties directly applied as HTML attributes,
               there is no way to check for their explicit browser support, and so we skip skip this check for them. */

/* If the display option is being set to a non-"none" (e.g. "block") and opacity (filter on IE<=8) is being
               animated to an endValue of non-zero, the user's intention is to fade in from invisible, thus we forcefeed opacity
               a startValue of 0 if its startValue hasn't already been sourced by value transferring or prior forcefeeding. */

/* If values have been transferred from the previous Velocity call, extract the endValue and rootPropertyValue
               for all of the current call's properties that were *also* animated in the previous call. */

/* Note: Value transferring can optionally be disabled by the user via the _cacheValues option. */

/* The previous call's rootPropertyValue is extracted from the element's data cache since that's the
                 instance of rootPropertyValue that gets freshly updated by the tweening process, whereas the rootPropertyValue
                 attached to the incoming lastTweensContainer is equal to the root property's value prior to any tweening. */

/* Handle hooked properties. */

/* Note: The following getPropertyValue() call does not actually trigger a DOM query;
                     getPropertyValue() will extract the hook from rootPropertyValue. */

/* Grab this hook's zero-value template, e.g. "0px 0px 0px black". */

/* Handle non-hooked properties that haven't already been defined via forcefeeding. */

/**************************
               Value Data Extraction
               **************************/

/* Match the unit type at the end of the value. */

/* Strip the unit type off of value. */

/* Grab the unit type. */

/* If no unit type was supplied, assign one that is appropriate for this property (e.g. "deg" for rotateZ or "px" for width). */

/* Separates a property value into its numeric value and its unit type. */

// index in startValue

// index in endValue

// array of startValue numbers

// array of endValue numbers

// Keep track of being inside a "calc()" so we don't duplicate it

// Keep track of being inside an RGB as we can't use fractional values

// Keep track of being inside an RGBA as we must pass fractional for the alpha channel

// Make sure we can only ever match a single dot in a decimal

// temporary character buffer

// Can never match two characters

// temporary unit type

// Same units

// Same numbers, so just copy over

// Different numbers, so store them

// Different units, so put into a "calc(from + to)" and animate each side to/from zero

// TODO: changing units, fixing colours

// Keep track of being inside a calc()

// Keep track of being inside an rgb() / rgba()

/* Separate startValue. */

/* Separate endValue, and extract a value operator (e.g. "+=", "-=") if one exists. */

/* Strip the operator off of the value. */

/* Parse float values from endValue and startValue. Default to 0 if NaN is returned. */

/***************************************
                 Property-Specific Value Conversion
                 ***************************************/

/* Custom support for properties that don't actually accept the % unit type, but where pollyfilling is trivial and relatively foolproof. */

/* A %-value fontSize/lineHeight is relative to the parent's fontSize (as opposed to the parent's dimensions),
                   which is identical to the em unit's behavior, so we piggyback off of that. */

/* Convert % into an em decimal value. */

/***************************
               Unit Ratio Calculation
               ***************************/

/* When queried, the browser returns (most) CSS property values in pixels. Therefore, if an endValue with a unit type of
               %, em, or rem is animated toward, startValue must be converted from pixels into the same unit type as endValue in order
               for value manipulation logic (increment/decrement) to proceed. Further, if the startValue was forcefed or transferred
               from a previous call, startValue may also not be in pixels. Unit conversion logic therefore consists of two steps:
               1) Calculating the ratio of %/em/rem/vh/vw relative to pixels
               2) Converting startValue into the same unit of measurement as endValue based on these ratios. */

/* Unit conversion ratios are calculated by inserting a sibling node next to the target node, copying over its position property,
               setting values with the target unit type then comparing the returned pixel value. */

/* Note: Even if only one of these unit types is being animated, all unit ratios are calculated at once since the overhead
               of batching the SETs and GETs together upfront outweights the potential overhead
               of layout thrashing caused by re-querying for uncalculated ratios for subsequently-processed properties. */

/* Todo: Shift this logic into the calls' first tick instance so that it's synced with RAF. */

/********************
               Unit Conversion
               ********************/

/* The * and / operators, which are not passed in with an associated unit, inherently use startValue's unit. Skip value and unit conversion. */

/* If startValue and endValue differ in unit type, convert startValue into the same unit type as endValue so that if endValueUnitType
                 is a relative unit (%, em, rem), the values set during tweening will continue to be accurately relative even if the metrics they depend
                 on are dynamically changing during the course of the animation. Conversely, if we always normalized into px and used px for setting values, the px ratio
                 would become stale if the original unit being animated toward was relative and the underlying metrics change during the animation. */

/* Since 0 is 0 in any unit type, no conversion is necessary when startValue is 0 -- we just start at 0 with endValueUnitType. */

/* Unit conversion is also skipped when endValue is 0, but *startValueUnitType* must be used for tween values to remain accurate. */

/* Note: Skipping unit conversion here means that if endValueUnitType was originally a relative unit, the animation won't relatively
                 match the underlying metrics if they change, but this is acceptable since we're animating toward invisibility instead of toward visibility,
                 which remains past the point of the animation's completion. */

/* By this point, we cannot avoid unit conversion (it's undesirable since it causes layout thrashing).
                   If we haven't already, we trigger calculateUnitRatios(), which runs once per element per call. */

/************************
                 Same Ratio Checks
                 ************************/

/* The properties below are used to determine whether the element differs sufficiently from this call's
                 previously iterated element to also differ in its unit conversion ratios. If the properties match up with those
                 of the prior element, the prior element's conversion ratios are used. Like most optimizations in Velocity,
                 this is done to minimize DOM querying. */

/* Determine if the same % ratio can be used. % is based on the element's position value and its parent's width and height dimensions. */

/* Determine if the same em ratio can be used. em is relative to the element's fontSize. */

/* Store these ratio indicators call-wide for the next element to compare against. */

/***************************
                 Element-Specific Units
                 ***************************/

/* Note: IE8 rounds to the nearest pixel when returning CSS values, thus we perform conversions using a measurement
                 of 100 (instead of 1) to give our ratios a precision of at least 2 decimal values. */

/* To accurately and consistently calculate conversion ratios, the element's cascaded overflow and box-sizing are stripped.
                   Similarly, since width/height can be artificially constrained by their min-/max- equivalents, these are controlled for as well. */

/* Note: Overflow must be also be controlled for per-axis since the overflow property overwrites its per-axis values. */

/* width and height act as our proxy properties for measuring the horizontal and vertical % ratios. */

/* paddingLeft arbitrarily acts as our proxy property for the em ratio. */

/* Divide the returned value by the measurement to get the ratio between 1% and 1px. Default to 1 since working with 0 can produce Infinite. */

/***************************
                 Element-Agnostic Units
                 ***************************/

/* Whereas % and em ratios are determined on a per-element basis, the rem unit only needs to be checked
                 once per call since it's exclusively dependant upon document.body's fontSize. If this is the first time
                 that calculateUnitRatios() is being run during this call, remToPx will still be set to its default value of null,
                 so we calculate it now. */

/* Default to browsers' default fontSize of 16px in the case of 0. */

/* Similarly, viewport units are %-relative to the window's inner dimensions. */

/* The following RegEx matches CSS properties that have their % values measured relative to the x-axis. */

/* Note: W3C spec mandates that all of margin and padding's properties (even top and bottom) are %-relative to the *width* of the parent element. */

/* In order to avoid generating n^2 bespoke conversion functions, unit conversion is a two-step process:
                   1) Convert startValue into pixels. 2) Convert this new pixel value into endValue's unit type. */

/* Note: translateX and translateY are the only properties that are %-relative to an element's own dimensions -- not its parent's dimensions.
                       Velocity does not include a special conversion process to account for this behavior. Therefore, animating translateX/Y from a % value
                       to a non-% value will produce an incorrect start value. Fortunately, this sort of cross-unit conversion is rarely done by users in practice. */

/* px acts as our midpoint in the unit conversion process; do nothing. */

/* Invert the px ratios to convert into to the target unit. */

/* startValue is already in px, do nothing; we're done. */

/*********************
               Relative Values
               *********************/

/* Operator logic must be performed last since it requires unit-normalized start and end values. */

/* Note: Relative *percent values* do not behave how most people think; while one would expect "+=50%"
               to increase the property 1.5x its current value, it in fact increases the percent units in absolute terms:
               50 points is added on top of the current % value. */

/**************************
               tweensContainer Push
               **************************/

/* Construct the per-property tween object, and push it to the element's tweensContainer. */

/* Create a tween out of each property, and append its associated data to tweensContainer. */

/* The original property name's format must be used for the parsePropertyValue() lookup,
               but we then use its camelCase styling to normalize it for manipulation. */

/* Find shorthand color properties that have been passed a hex string. */

/* Would be quicker to use CSS.Lists.colors.includes() if possible */

/* Parse the value data for each shorthand. */

/* Inject the RGB component tweens into propertiesMap. */

/* Convert the hex strings into their RGB component arrays. */

/* If we have replaced a shortcut color value then don't update the standard property name */

/* Along with its property data, store a reference to the element itself onto tweensContainer. */

/*****************
           Call Push
           *****************/

/* Note: tweensContainer can be empty if all of the properties in this call's property map were skipped due to not
           being supported by the browser. The element property is used for checking that the tweensContainer has been appended to. */

/* Apply the "velocity-animating" indicator class. */

/* The call array houses the tweensContainers for each element being animated in the current call. */

/* Store the tweensContainer and options if we're working on the default effects queue, so that they can be used by the reverse command. */

/* Switch on the element's animating flag. */

/* Once the final element in this call's element set has been processed, push the call array onto
             Velocity.State.calls for the animation tick to immediately begin processing. */

/* Add the current call plus its associated metadata (the element set and the call's options) onto the global call container.
               Anything on this call container is subjected to tick() processing. */

/* If the animation tick isn't running, start it. (Velocity shuts it off when there are no active calls to process.) */

/* Start the tick loop. */

/* When the queue option is set to false, the call skips the element's queue and fires immediately. */

/* In mock mode, all animations are forced to 1ms so that they occur immediately upon the next rAF tick.
           Alternatively, a multiplier can be passed in to time remap all delays and durations. */

/*******************
         Option: Easing
         *******************/

/**********************
         Option: Callbacks
         **********************/

/* Callbacks must functions. Otherwise, default to null. */

/*********************************
         Option: Display & Visibility
         *********************************/

/* Refer to Velocity's documentation (VelocityJS.org/#displayAndVisibility) for a description of the display and visibility options' behavior. */

/* Note: We strictly check for undefined instead of falsiness because display accepts an empty string value. */

/* Users can pass in a special "auto" value to instruct Velocity to set the element to its default display value. */

/**********************
         Option: mobileHA
         **********************/

/* When set to true, and if this is a mobile device, mobileHA automatically enables hardware acceleration (via a null transform hack)
         on animating elements. HA is removed from the element at the completion of its animation. */

/* Note: Android Gingerbread doesn't support HA. If a null transform hack (mobileHA) is in fact set, it will prevent other tranform subproperties from taking effect. */

/* Note: You can read more about the use of mobileHA in Velocity's documentation: VelocityJS.org/#mobileHA. */

/* Since this buildQueue call doesn't respect the element's existing queue (which is where a delay option would have been appended),
           we manually inject the delay property here with an explicit setTimeout. */

/* Temporarily store delayed elements to facilitate access for global pause/resume */

/* Otherwise, the call undergoes element queueing as normal. */

/* Note: To interoperate with jQuery, Velocity uses jQuery's own $.queue() stack for queuing logic. */

/* If the clearQueue flag was passed in by the stop command, resolve this call's promise. (Promises can only be resolved once,
             so it's fine if this is repeatedly triggered for each element in the associated call.) */

/* This flag indicates to the upcoming completeCall() function that this queue entry was initiated by Velocity.
             See completeCall() for further details. */

/*********************
         Auto-Dequeuing
         *********************/

/* As per jQuery's $.queue() behavior, to fire the first non-custom-queue entry on an element, the element
         must be dequeued if its queue stack consists *solely* of the current call. (This can be determined by checking
         for the "inprogress" item that jQuery prepends to active queue stack arrays.) Regardless, whenever the element's
         queue is further appended with additional items -- including $.delay()'s or even $.animate() calls, the queue's
         first entry is automatically fired. This behavior contrasts that of custom queues, which never auto-fire. */

/* Note: When an element set is being subjected to a non-parallel Velocity call, the animation will not begin until
         each one of the elements in the set has reached the end of its individually pre-existing queue chain. */

/* Note: Unfortunately, most people don't fully grasp jQuery's powerful, yet quirky, $.queue() function.
         Lean more here: http://stackoverflow.com/questions/1058158/can-somebody-explain-jquery-queue-to-me */

/* Turn Velocity into the animation function, extended with the pre-existing Velocity object. */

/* For legacy support, also expose the literal animate method. */

/**************
     Timing
     **************/

/* Ticker function. */

/* Inactive browser tabs pause rAF, which results in all active animations immediately sprinting to their completion states when the tab refocuses.
     To get around this, we dynamically switch rAF to setTimeout (which the browser *doesn't* pause) when the tab loses focus. We skip this for mobile
     devices to avoid wasting battery power on inactive tabs. */

/* Note: Tab focus detection doesn't work on older versions of IE, but that's okay since they don't support rAF to begin with. */

/* Reassign the rAF function (which the global tick() function uses) based on the tab's focus state. */

/* The tick function needs a truthy first argument in order to pass its internal timestamp check. */

/* The rAF loop has been paused by the browser, so we manually restart the tick. */

/* Page could be sitting in the background at this time (i.e. opened as new tab) so making sure we use correct ticker from the start */

/* And then run check again every time visibility changes */

/************
     Tick
     ************/

/* Note: All calls to Velocity are pushed to the Velocity.State.calls array, which is fully iterated through upon each tick. */

/******************
     Frameworks
     ******************/

/* Both jQuery and Zepto allow their $.fn object to be extended to allow wrapped elements to be subjected to plugin calls.
     If either framework is loaded, register a "velocity" extension pointing to Velocity's core animate() method.  Velocity
     also registers itself onto a global container (window.jQuery || window.Zepto || window) so that certain features are
     accessible beyond just a per-element scope. This master object contains an .animate() method, which is later assigned to $.fn
     (if jQuery or Zepto are present). Accordingly, Velocity can both act on wrapped DOM elements and stand alone for targeting raw DOM elements. */

/* Assign the element function to Velocity's core animate() method. */

/* Assign the object function's defaults to Velocity's global defaults object. */

/***********************
     Packaged Redirects
     ***********************/

/* slideUp, slideDown */

/* Show the element before slideDown begins and hide the element after slideUp completes. */

/* Note: Inline elements cannot have dimensions animated, so they're reverted to inline-block. */

/* Cache the elements' original vertical dimensional property values so that we can animate back to them. */

/* If the user passed in a begin callback, fire it now. */

/* For slideDown, use forcefeeding to animate all vertical properties from 0. For slideUp,
             use forcefeeding to start from computed values and animate down to 0. */

/* Force vertical overflow content to clip so that sliding works as expected. */

/* Reset element to its pre-slide inline values once its slide animation is complete. */

/* If the user passed in a complete callback, fire it now. */

/* fadeIn, fadeOut */

/* Since redirects are triggered individually for each element in the animated set, avoid repeatedly triggering
         callbacks by firing them only when the final element has been reached. */

/* If a display was passed in, use it. Otherwise, default to "none" for fadeOut or the element-specific default for fadeIn. */

/* Note: We allow users to pass in "null" to skip display setting altogether. */

/* Hardcode a reference to the plugin name. */

/* jQuery <=1.4.2 returns null instead of undefined when no match is found. We normalize this behavior. */

/**************
     Delay Timer
     **************/

/* Check for any delay timers, and pause the set timeouts (while preserving time data)
       to be resumed when the "resume" command is issued */

/* Check for any paused timers and resume */

/* If the element was mid-delay, re initiate the timeout with the remaining delay */

/**************
     Easing
     **************/

/* Step easing generator. */

/* Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */

/* Must contain four arguments. */

/* Arguments must be numbers. */

/* X values must be in the [0, 1] range. */

/* Determine the appropriate easing type given an easing input. */

/* The easing option can either be a string that references a pre-registered easing,
       or it can be a two-/four-item array of integers to be converted into a bezier/spring function. */

/* Ensure that the easing has been assigned to jQuery's Velocity.Easings object. */

/* Revert to the Velocity-wide default easing type, or fall back to "swing" (which is also jQuery's default)
       if the Velocity-wide default has been incorrectly modified. */

/* An empty timestamp argument indicates that this is the first tick occurence since ticking was turned on.
       We leverage this metadata to fully ignore the first tick pass since RAF's initial pass is fired whenever
       the browser's next tick sync time occurs, which results in the first elements subjected to Velocity
       calls being animated out of sync with any elements animated immediately thereafter. In short, we ignore
       the first RAF tick pass so that elements being immediately consecutively animated -- instead of simultaneously animated
       by the same Velocity call -- are properly batched into the same initial RAF tick and consequently remain in sync thereafter. */

/* We normally use RAF's high resolution timestamp but as it can be significantly offset when the browser is
         under high stress we give the option for choppiness over allowing the browser to drop huge chunks of frames.
         We use performance.now() and shim it if it doesn't exist for when the tab is hidden. */

/********************
         Call Iteration
         ********************/

/* To speed up iterating over this array, it is compacted (falsey items -- calls that have completed -- are removed)
         when its length has ballooned to a point that can impact tick performance. This only becomes necessary when animation
         has been continuous with many elements over a long period of time; whenever all active calls are completed, completeCall() clears Velocity.State.calls. */

/* Array compacting. Copyright Lo-Dash. MIT License: https://github.com/lodash/lodash/blob/master/LICENSE.txt */

/* Iterate through each active call. */

/* When a Velocity call is completed, its Velocity.State.calls entry is set to false. Continue on to the next call. */

/************************
           Call-Wide Variables
           ************************/

/* If timeStart is undefined, then this is the first time that this call has been processed by tick().
           We assign timeStart now so that its value is as close to the real animation start time as possible.
           (Conversely, had timeStart been defined when this call was added to Velocity.State.calls, the delay
           between that time and now would cause the first few frames of the tween to be skipped since
           percentComplete is calculated relative to timeStart.) */

/* Further, subtract 16ms (the approximate resolution of RAF) from the current time value so that the
           first tick iteration isn't wasted by animating at 0% tween completion, which would produce the
           same style value as the element's current value. */

/* If a pause object is present, skip processing unless it has been set to resume */

/* Update the time start to accomodate the paused completion amount */

/* Remove pause object after processing */

/**********************
           Element Iteration
           **********************/

/* For every call, iterate through each of the elements in its set. */

/* The tween's completion percentage is relative to the tween's start time, not the tween's start value
           (which would result in unpredictable tween durations since JavaScript's timers are not particularly accurate).
           Accordingly, we ensure that percentComplete does not exceed 1. */

/* Check to see if this element has been deleted midway through the animation by checking for the
             continued existence of its data cache. If it's gone, or the element is currently paused, skip animating this element. */

/**********************************
             Display & Visibility Toggling
             **********************************/

/* If the display option is set to non-"none", set it upfront so that the element can become visible before tweening begins.
             (Otherwise, display's "none" value is set in completeCall() once the animation has completed.) */

/* Same goes with the visibility option, but its "none" equivalent is "hidden". */

/************************
             Property Iteration
             ************************/

/* For every element, iterate through each property. */

/* Note: In addition to property tween data, tweensContainer contains a reference to its associated element. */

/* Easing can either be a pre-genereated function or a string that references a pre-registered easing
                 on the Velocity.Easings object. In either case, return the appropriate easing *function*. */

/******************************
                 Current Value Calculation
                 ******************************/

/* If this is the last tick pass (if we've reached 100% completion for this tween),
                   ensure that currentValue is explicitly set to its target endValue so that it's not subjected to any rounding. */

/* Otherwise, calculate currentValue based on the current delta from startValue. */

/* If we're tweening a fake 'tween' property in order to log transition values, update the one-per-call variable so that
                 it can be passed into the progress callback. */

/******************
                   Hooks: Part I
                   ******************/

/* For hooked properties, the newly-updated rootPropertyValueCache is cached onto the element so that it can be used
                   for subsequent hooks in this call that are associated with the same root property. If we didn't cache the updated
                   rootPropertyValue, each subsequent update to the root property in this tick pass would reset the previous hook's
                   updates to rootPropertyValue prior to injection. A nice performance byproduct of rootPropertyValue caching is that
                   subsequently chained animations using the same hookRoot but a different hook can use this cached rootPropertyValue. */

/*****************
                   DOM Update
                   *****************/

/* setPropertyValue() returns an array of the property name and property value post any normalization that may have been performed. */

/* Note: To solve an IE<=8 positioning bug, the unit type is dropped when setting a property value of 0. */

/* SET */

/*******************
                   Hooks: Part II
                   *******************/

/* Now that we have the hook's updated rootPropertyValue (the post-processed value provided by adjustedSetData), cache it onto the element. */

/* Since adjustedSetData contains normalized data ready for DOM updating, the rootPropertyValue needs to be re-extracted from its normalized form. ?? */

/***************
                   Transforms
                   ***************/

/* Flag whether a transform property is being animated so that flushTransformCache() can be triggered once this tick pass is complete. */

/****************
             mobileHA
             ****************/

/* If mobileHA is enabled, set the translate3d transform to null to force hardware acceleration.
             It's safe to override this property since Velocity doesn't actually support its animation (hooks are used in its place). */

/* All entries on the transformCache object are later concatenated into a single transform string via flushTransformCache(). */

/* The non-"none" display value is only applied to an element once -- when its associated call is first ticked through.
           Accordingly, it's set to false so that it isn't re-processed by this call in the next tick. */

/* Pass the elements and the timing data (percentComplete, msRemaining, timeStart, tweenDummyValue) into the progress callback. */

/* If this call has finished tweening, pass its index to completeCall() to handle call cleanup. */

/* Note: completeCall() sets the isTicking flag to false when the last call on Velocity.State.calls has completed. */

/**********************
     Call Completion
     **********************/

/* Note: Unlike tick(), which processes all active calls at once, call completion is handled on a per-call basis. */

/* Ensure the call exists. */

/* Pull the metadata from the call. */

/*************************
       Element Finalization
       *************************/

/* If the user set display to "none" (intending to hide the element), set it now that the animation has completed. */

/* Note: display:none isn't set when calls are manually stopped (via Velocity("stop"). */

/* Note: Display gets ignored with "reverse" calls and infinite loops, since this behavior would be undesirable. */

/* If the element's queue is empty (if only the "inprogress" item is left at position 0) or if its queue is about to run
         a non-Velocity-initiated entry, turn off the isAnimating flag. A non-Velocity-initiatied queue entry's logic might alter
         an element's CSS values and thereby cause Velocity's cached value data to go stale. To detect if a queue entry was initiated by Velocity,
         we check for the existence of our special Velocity.queueEntryFlag declaration, which minifiers won't rename since the flag
         is assigned to jQuery's global $ object and thus exists out of Velocity's own scope. */

/* Clear the element's rootPropertyValueCache, which will become stale. */

/* If any 3D transform subproperty is at its default value (regardless of unit type), remove it. */

/* Mobile devices have hardware acceleration removed at the end of the animation in order to avoid hogging the GPU's memory. */

/* Flush the subproperty removals to the DOM. */

/* Remove the "velocity-animating" indicator class. */

/*********************
         Option: Complete
         *********************/

/* Complete is fired once per call (not once per element) and is passed the full raw DOM element set as both its context and its first argument. */

/* Note: Callbacks aren't fired when calls are manually stopped (via Velocity("stop"). */

/**********************
         Promise Resolving
         **********************/

/* Note: Infinite loops don't return promises. */

/****************************
         Option: Loop (Infinite)
         ****************************/

/* If a rotateX/Y/Z property is being animated by 360 deg with loop:true, swap tween start/end values to enable
           continuous iterative rotation looping. (Otherise, the element would just rotate back and forth.) */

/***************
         Dequeueing
         ***************/

/* Fire the next call in the queue so long as this call's queue wasn't set to false (to trigger a parallel animation),
         which would have already caused the next call to fire. Note: Even if the end of the animation queue has been reached,
         $.dequeue() must still be called in order to completely clear jQuery's animation queue. */

/************************
       Calls Array Cleanup
       ************************/

/* Since this call is complete, set it to false so that the rAF tick skips it. This array is later compacted via compactSparseArray().
       (For performance reasons, the call is set to false instead of being deleted from the array: http://www.html5rocks.com/en/tutorials/speed/v8/) */

/* Iterate through the calls array to determine if this was the final in-progress animation.
       If so, set a flag to end ticking and clear the calls array. */

/* tick() will detect this flag upon its next iteration and subsequently turn itself off. */

/* Clear the calls array so that its length is reset. */

/* Revert to jQuery's $.animate(), and lose Velocity's extra features. */

/* 150 */

/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.0
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */

// NOTE: 1 DOM access here

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */

// Return body, `getScroll` will take care to get the correct `scrollTop` from it

// Firefox want us to check `-x` and `-y` variations as well

/**
 * Returns the reference node of the reference object, or the reference object itself.
 * @method
 * @memberof Popper.Utils
 * @param {Element|Object} reference - the reference element (the popper will be relative to this)
 * @returns {Element} parent
 */

/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */

// Skip hidden elements which don't have an offsetParent

// .offsetParent will return the closest TH, TD or TABLE in case

// no offsetParent is present, I hate this job...

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */

// This check is needed to avoid errors in case one of the elements isn't defined for any reason

// Here we make sure to give as "start" the element that comes first in the DOM

// Both nodes are inside #document

// one of the nodes is inside shadowDOM, find which one

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */

// IE10 10 FIX: Please, don't ask, the element isn't

// considered in DOM in some circumstances...

// This isn't reproducible in IE10 compatibility mode of IE11

// subtract scrollbar size from sizes

// if an hypothetical scrollbar is detected, we must be sure it's not a `border`

// we make this check conditional for performance reasons

// In cases where the parent is fixed, we must ignore negative scroll in offset calc

// Subtract margins of documentElement in case it's being used as parent

// we do this only on HTML because it's the only element that behaves

// differently when margins are applied to it. The margins are included in

// the box of the documentElement, in the other cases not.

// Attach marginTop and marginLeft because in some circumstances we may need them

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */

/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */

// Handle viewport case

// Handle other cases based on DOM element used as boundaries

// In case of HTML, we need a different computation

// for all the other DOM elements, this one is good

// Add paddings

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */

// Get popper node sizes

// Add position, width and height to our offsets object

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */

// use native find if supported

// use `filter` to obtain the same behavior of `find`

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */

// use native findIndex if supported

// use `find` + `indexOf` if `findIndex` isn't supported

// eslint-disable-line dot-notation

// Add properties to offsets to make them a complete clientRect object

// we do this before each modifier to make sure the previous one doesn't

// mess with these values

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */

// if popper is destroyed, don't perform any further update

// compute reference element offsets

// compute auto placement, store placement inside the data object,

// modifiers will be able to edit `placement` if needed

// and refer to originalPlacement to know the original value

// store the computed placement inside `originalPlacement`

// compute the popper offsets

// run the modifiers

// the first `update` will call `onCreate` callback

// the other ones will call `onUpdate` callback

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */

/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */

// touch DOM only if `applyStyle` modifier is enabled

// remove the popper if user explicitly asked for the deletion on destroy

// do not use `remove` because IE11 doesn't support it

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */

// Resize event listener on window

// Scroll event listener on scroll parents

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */

// Remove resize event listener on window

// Remove scroll event listener on scroll parents

// Reset state

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */

// add unit if the value is numeric and is one of the following

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */

// Get rid of `auto` `auto-start` and `auto-end`

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */

// Use height if placement is left or right and index is 0 otherwise use width

// in this way the first offset will use an axis and the second one

// will use the other one

// If divider is found, we divide the list of values and operands to divide

// them by ofset X and Y.

// Convert the values with units to absolute pixels to allow our computations

// Loop trough the offsets arrays and execute the operations

// Most of the units rely on the orientation of the popper

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */

// separate value from unit

// If it's not a number it's an operator, I guess

// if is an explicit pixel unit, we get rid of the unit and keep the value

// if is an implicit unit, it's px, and we return just the value

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */

/**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */

/**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */

/**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */

/**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */

/**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */

/**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */

/**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */

/**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=100 - Index used to define the order of execution */

/** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */

/** @prop {ModifierFn} */

// if shift shiftvariation is specified, run the modifier

/**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=200 - Index used to define the order of execution */

/** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */

/**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=300 - Index used to define the order of execution */

// If offsetParent is the reference element, we really want to

// go one step up and use the next offsetParent as reference to

// avoid to make this modifier completely useless and look like broken

// NOTE: DOM access here

// resets the popper's position so that the document size can be calculated excluding

// the size of the popper element itself

// restores the original style properties after the offsets have been computed

/**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */

/**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */

/**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */

/**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=400 - Index used to define the order of execution */

/**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=500 - Index used to define the order of execution */

// arrow depends on keepTogether in order to work

// if arrowElement is a string, suppose it's a CSS selector

// if arrowElement is not found, don't run the modifier

// if the arrowElement isn't a query selector we must check that the

// provided DOM node is child of its popper node

// extends keepTogether behavior making sure the popper and its

// reference have enough pixels in conjunction

// top/left side

// bottom/right side

// compute center of the popper

// Compute the sideValue using the updated popper offsets

// take popper margin in account because we don't have this info available

// prevent arrowElement from being placed not contiguously to its popper

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */

/** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */

/**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=600 - Index used to define the order of execution */

// if `inner` modifier is enabled, we can't use the `flip` modifier

// seems like flip is trying to loop, probably there's not enough space on any of the flippable sides

// this boolean to detect any flip loop

// this object contains `position`, we want to preserve it along with

// any additional property we may add in the future

/**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */

/**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */

/**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */

/**
     * @prop {Boolean} flipVariations=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the reference element overlaps its boundaries.
     *
     * The original placement should have a set variation.
     */

/**
     * @prop {Boolean} flipVariationsByContent=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the popper element overlaps its reference boundaries.
     *
     * The original placement should have a set variation.
     */

/**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=700 - Index used to define the order of execution */

/** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */

/**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=800 - Index used to define the order of execution */

// Avoid unnecessary DOM access if visibility hasn't changed

/**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=850 - Index used to define the order of execution */

/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */

// when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)

// and not the bottom of the html element

// othwerise, we use the standard `top`, `left`, `bottom` and `right` properties

// Attributes

// Update `data` attributes, styles and arrowStyles

/**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */

/**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */

/**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */

/**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=900 - Index used to define the order of execution */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */

// any property present in `data.styles` will be applied to the popper,

// in this way we can make the 3rd party modifiers add custom styles to it

// Be aware, modifiers could override the properties defined in the previous

// lines of this modifier!

// any property present in `data.attributes` will be applied to the popper,

// they will be set as HTML attributes of the element

// if arrowElement is defined and arrowStyles has some properties

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */

/** @prop {Function} */

// Apply `position` to popper before anything else because

// without the position applied we can't guarantee correct computations

/**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */

/**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {Element|referenceObject} reference - The reference element used to position the popper
   * @param {Element} popper - The HTML / XML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */

// make update() debounced, so that it only runs at most once-per-tick

// with {} we create a new object with the options inside it

// init state

// get reference and popper elements (allow jQuery wrappers)

// Deep merge modifiers options

// Refactoring modifiers' list (Object => Array)

// modifiers have the ability to execute arbitrary code when Popper.js get inited

// such code is executed in the same order of its modifier

// they could add new properties to their options configuration

// BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!

// fire the first update to position the popper in the right place

// setup event listeners, they will take care of update the position in specific situations

// We can't use class properties because they don't get listed in the

// class prototype and break stuff like Sinon stubs

/**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */

/**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */

/* 151 */

/*!
 * imagesLoaded v4.1.4
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */

// universal module definition

/*global define: false, module: false, require: false */

// --------------------------  factory -------------------------- //

// -------------------------- helpers -------------------------- //

// extend objects

// turn element or nodeList into an array

// -------------------------- imagesLoaded -------------------------- //

/**
   * @param {Array, Element, NodeList, String} elem
   * @param {Object or Function} options - if function, use as callback
   * @param {Function} onAlways - callback function
   */

// coerce ImagesLoaded() without new, to be new ImagesLoaded()

// use elem as selector string

// bail if bad element

// shift arguments if no options set

// add jQuery Deferred object

// HACK check async to allow time to bind listeners

// filter & find items if we have an item selector

/**
   * @param {Node} element
   */

// filter siblings

// get background image on element

// find children

// no non-element nodes, #143

// concat childElems to filterFound array

// get child background images

// --------------------------  -------------------------- //

// -------------------------- Background -------------------------- //

// inherit LoadingImage prototype

// get url inside url("...")

/**
   * @param {Image} img
   */

// HACK - Chrome triggers event before object properties have changed. #83

// complete if no images

// progress event

// check if completed

// report based on naturalWidth

// If none of the checks above matched, simulate loading on detached element.

// bind to image as well for Firefox. #191

// check for non-zero, non-undefined naturalWidth

// fixes Safari+InfiniteScroll+Masonry bug infinite-scroll#671

// ----- events ----- //

// trigger specified handler for event type

// -------------------------- jQuery -------------------------- //

// $().imagesLoaded()

// set local variable

// try making plugin

/* 152 */

/* 153 */

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.
 *
 *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document
 *
 */

// Exit early if we're not running in a browser.

// Exit early if all IntersectionObserver and IntersectionObserverEntry

// features are natively supported.

// Minimal polyfill for Edge 15's lack of `isIntersecting`

// See: https://github.com/w3c/IntersectionObserver/issues/211

/**
   * A local reference to the document.
   */

/**
   * An IntersectionObserver registry. This registry exists to hold a strong
   * reference to IntersectionObserver instances currently observing a target
   * element. Without this registry, instances without another reference may be
   * garbage collected.
   */

/**
   * The minimum interval within which the document will be checked for
   * intersection changes.
   */

/**
   * The frequency in which the polyfill polls for intersection changes.
   * this can be updated on a per instance basis and must be set prior to
   * calling `observe` on the first target.
   */

/**
   * Use a mutation observer on the root element
   * to detect intersection changes.
   */

/**
   * Starts observing a target element for intersection changes based on
   * the thresholds values.
   * @param {Element} target The DOM element to observe.
   */

/**
   * Stops observing a target element for intersection changes.
   * @param {Element} target The DOM element to observe.
   */

/**
   * Stops observing all target elements for intersection changes.
   */

/**
   * Returns any queue entries that have not yet been reported to the
   * callback and clears the queue. This can be used in conjunction with the
   * callback to obtain the absolute most up-to-date intersection information.
   * @return {Array} The currently queued entries.
   */

/**
   * Accepts the threshold value from the user configuration object and
   * returns a sorted array of unique threshold values. If a value is not
   * between 0 and 1 and error is thrown.
   * @private
   * @param {Array|number=} opt_threshold An optional threshold value or
   *     a list of threshold values, defaulting to [0].
   * @return {Array} A sorted list of unique and valid threshold values.
   */

/**
   * Accepts the rootMargin value from the user configuration object
   * and returns an array of the four margin values as an object containing
   * the value and unit properties. If any of the values are not properly
   * formatted or use a unit other than px or %, and error is thrown.
   * @private
   * @param {string=} opt_rootMargin An optional rootMargin value,
   *     defaulting to '0px'.
   * @return {Array<Object>} An array of margin objects with the keys
   *     value and unit.
   */

// Handles shorthand.

/**
   * Starts polling for intersection changes if the polling is not already
   * happening, and if the page's visibility state is visible.
   * @private
   */

// If a poll interval is set, use polling instead of listening to

// resize and scroll events or DOM mutations.

/**
   * Stops polling for intersection changes.
   * @private
   */

/**
   * Scans each observation target for intersection changes and adds them
   * to the internal entries queue. If new entries are found, it
   * schedules the callback to be invoked.
   * @private
   */

// If the new entry intersection ratio has crossed any of the

// thresholds, add a new entry.

// If the root is not in the DOM or target is not contained within

// root but the previous entry for this target had an intersection,

// add a new record indicating removal.

/**
   * Accepts a target and root rect computes the intersection between then
   * following the algorithm in the spec.
   * TODO(philipwalton): at this time clip-path is not considered.
   * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo
   * @param {Element} target The target DOM element
   * @param {Object} rootRect The bounding rect of the root after being
   *     expanded by the rootMargin value.
   * @return {?Object} The final intersection rect object or undefined if no
   *     intersection is found.
   * @private
   */

// If the element isn't displayed, an intersection can't happen.

// If the parent isn't displayed, an intersection can't happen.

// If either of the above conditionals set a new parentRect,

// calculate new intersection data.

// If the element has a non-visible overflow, and it's not the <body>

// or <html> element, update the intersection rect.

// Note: <body> and <html> cannot be clipped to a rect that's not also

// the document rect, so no need to compute a new intersection.

/**
   * Returns the root rect after being expanded by the rootMargin value.
   * @return {Object} The expanded root rect.
   * @private
   */

// Use <html>/<body> instead of window since scroll bars affect size.

/**
   * Accepts a rect and expands it by the rootMargin value.
   * @param {Object} rect The rect object to expand.
   * @return {Object} The expanded rect.
   * @private
   */

/**
   * Accepts an old and new entry and returns true if at least one of the
   * threshold values has been crossed.
   * @param {?IntersectionObserverEntry} oldEntry The previous entry for a
   *    particular target element or null if no previous entry exists.
   * @param {IntersectionObserverEntry} newEntry The current entry for a
   *    particular target element.
   * @return {boolean} Returns true if a any threshold has been crossed.
   * @private
   */

// To make comparing easier, an entry that has a ratio of 0

// but does not actually intersect is given a value of -1

// Ignore unchanged ratios

// Return true if an entry matches a threshold or if the new ratio

// and the old ratio are on the opposite sides of a threshold.

/**
   * Returns whether or not the root element is an element and is in the DOM.
   * @return {boolean} True if the root element is an element and is in the DOM.
   * @private
   */

/**
   * Returns whether or not the target element is a child of root.
   * @param {Element} target The target element to check.
   * @return {boolean} True if the target element is a child of root.
   * @private
   */

/**
   * Adds the instance to the global IntersectionObserver registry if it isn't
   * already present.
   * @private
   */

/**
   * Removes the instance from the global IntersectionObserver registry.
   * @private
   */

// Exposes the constructors globally.

/**
   * Creates the global IntersectionObserverEntry constructor.
   * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry
   * @param {Object} entry A dictionary of instance properties.
   * @constructor
   */

// Calculates the intersection ratio.

// Sets intersection ratio.

// Round the intersection ratio to avoid floating point math issues:

// https://github.com/w3c/IntersectionObserver/issues/324

/**
   * Creates the global IntersectionObserver constructor.
   * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface
   * @param {Function} callback The function to be invoked after intersection
   *     changes have queued. The function is not invoked if the queue has
   *     been emptied by calling the `takeRecords` method.
   * @param {Object=} opt_options Optional configuration options.
   * @constructor
   */

// Binds and throttles `this._checkForIntersections`.

// Private properties.

// Public properties.

/**
   * Adds an event handler to a DOM node ensuring cross-browser compatibility.
   * @param {Node} node The DOM node to add the event handler to.
   * @param {string} event The event name.
   * @param {Function} fn The event handler to add.
   * @param {boolean} opt_useCapture Optionally adds the even to the capture
   *     phase. Note: this only works in modern browsers.
   */

/**
   * Removes a previously added event handler from a DOM node.
   * @param {Node} node The DOM node to remove the event handler from.
   * @param {string} event The event name.
   * @param {Function} fn The event handler to remove.
   * @param {boolean} opt_useCapture If the event handler was added with this
   *     flag set to true, it should be set to true here in order to remove it.
   */

/**
   * Returns the intersection between two rect objects.
   * @param {Object} rect1 The first rect.
   * @param {Object} rect2 The second rect.
   * @return {?Object} The intersection rect or undefined if no intersection
   *     is found.
   */

/**
   * Shims the native getBoundingClientRect for compatibility with older IE.
   * @param {Element} el The element whose bounding rect to get.
   * @return {Object} The (possibly shimmed) rect of the element.
   */

// Ignore Windows 7 IE11 "Unspecified error"

// https://github.com/w3c/IntersectionObserver/pull/205

// Older IE

/**
   * Returns an empty rect object. An empty rect is returned when an element
   * is not in the DOM.
   * @return {Object} The empty rect.
   */

/**
   * Checks to see if a parent element contains a child element (including inside
   * shadow DOM).
   * @param {Node} parent The parent element.
   * @param {Node} child The child element.
   * @return {boolean} True if the parent node contains the child node.
   */

/**
   * Gets the parent node of an element or its host element if the parent node
   * is a shadow root.
   * @param {Node} node The node whose parent to get.
   * @return {Node|null} The parent node or null if no parent exists.
   */

/* 154 */

/* 155 */

/* 156 */

// ECMAScript 6 symbols shim

// 19.4.1.1 Symbol([description])

// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14

// 19.4.2.1 Symbol.for(key)

// 19.4.2.5 Symbol.keyFor(sym)

// 19.1.2.2 Object.create(O [, Properties])

// 19.1.2.4 Object.defineProperty(O, P, Attributes)

// 19.1.2.3 Object.defineProperties(O, Properties)

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)

// 19.1.2.7 Object.getOwnPropertyNames(O)

// 19.1.2.8 Object.getOwnPropertySymbols(O)

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives

// https://bugs.chromium.org/p/v8/issues/detail?id=3443

// 24.3.2 JSON.stringify(value [, replacer [, space]])

// MS Edge converts symbol values to JSON as {}

// WebKit converts symbol values to JSON as null

// V8 throws on boxed symbols

// IE8 returns string on undefined

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

// 19.4.3.5 Symbol.prototype[@@toStringTag]

// 20.2.1.9 Math[@@toStringTag]

// 24.3.3 JSON[@@toStringTag]

/* 157 */

/* 158 */

// all enumerable object keys, includes symbols

/* 159 */

/* 160 */

// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)

/* 161 */

// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)

/* 162 */

/* 163 */

// 19.1.2.9 Object.getPrototypeOf(O)

/* 164 */

// 19.1.2.14 Object.keys(O)

/* 165 */

/* 166 */

// 19.1.2.5 Object.freeze(O)

/* 167 */

// 19.1.2.17 Object.seal(O)

/* 168 */

// 19.1.2.15 Object.preventExtensions(O)

/* 169 */

// 19.1.2.12 Object.isFrozen(O)

/* 170 */

// 19.1.2.13 Object.isSealed(O)

/* 171 */

// 19.1.2.11 Object.isExtensible(O)

/* 172 */

// 19.1.3.1 Object.assign(target, source)

/* 173 */

// 19.1.3.10 Object.is(value1, value2)

/* 174 */

// 19.1.3.19 Object.setPrototypeOf(O, proto)

/* 175 */

// 19.1.3.6 Object.prototype.toString()

/* 176 */

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)

/* 177 */

// 19.2.4.2 name

/* 178 */

// 19.2.3.6 Function.prototype[@@hasInstance](V)

// for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

/* 179 */

// 18.2.5 parseInt(string, radix)

/* 180 */

// 18.2.4 parseFloat(string)

/* 181 */

// Number('+0x1') should be NaN, old V8 fix

// fast equal /^0b[01]+$/i

// fast equal /^0o[0-7]+$/i

// parseInt parses a string to a first unavailable symbol

// but ToNumber should return NaN if a string contains unavailable symbols

// ES3:

/* 182 */

// V8 ~ Android 4.3-

/* 183 */

// IE7-

/* 184 */

// 20.1.2.1 Number.EPSILON

/* 185 */

// 20.1.2.2 Number.isFinite(number)

/* 186 */

/* 187 */

// 20.1.2.4 Number.isNaN(number)

/* 188 */

// 20.1.2.5 Number.isSafeInteger(number)

/* 189 */

// 20.1.2.6 Number.MAX_SAFE_INTEGER

/* 190 */

// 20.1.2.10 Number.MIN_SAFE_INTEGER

/* 191 */

// 20.1.2.12 Number.parseFloat(string)

/* 192 */

// 20.1.2.13 Number.parseInt(string, radix)

/* 193 */

// 20.2.2.3 Math.acosh(x)

/* 194 */

// 20.2.2.5 Math.asinh(x)

// Tor Browser bug: Math.asinh(0) -> -0

/* 195 */

// 20.2.2.7 Math.atanh(x)

// Tor Browser bug: Math.atanh(-0) -> 0

/* 196 */

// 20.2.2.9 Math.cbrt(x)

/* 197 */

// 20.2.2.11 Math.clz32(x)

/* 198 */

// 20.2.2.12 Math.cosh(x)

/* 199 */

/* 200 */

// 20.2.2.16 Math.fround(x)

/* 201 */

/* 202 */

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])

/* 203 */

// 20.2.2.18 Math.imul(x, y)

// some WebKit versions fails with big numbers, some has wrong arity

/* 204 */

// 20.2.2.21 Math.log10(x)

/* 205 */

/* 206 */

// 20.2.2.22 Math.log2(x)

/* 207 */

/* 208 */

// 20.2.2.30 Math.sinh(x)

// V8 near Chromium 38 has a problem with very small numbers

/* 209 */

// 20.2.2.33 Math.tanh(x)

/* 210 */

// 20.2.2.34 Math.trunc(x)

/* 211 */

// length should be 1, old FF problem

// 21.1.2.2 String.fromCodePoint(...codePoints)

/* 212 */

// 21.1.2.4 String.raw(callSite, ...substitutions)

/* 213 */

// 21.1.3.25 String.prototype.trim()

/* 214 */

// 21.1.3.27 String.prototype[@@iterator]()

/* 215 */

// 21.1.3.3 String.prototype.codePointAt(pos)

/* 216 */

// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

/* , endPosition = @length */

/* 217 */

// 21.1.3.7 String.prototype.includes(searchString, position = 0)

/* , position = 0 */

/* 218 */

// 21.1.3.13 String.prototype.repeat(count)

/* 219 */

// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

/* 220 */

// B.2.3.2 String.prototype.anchor(name)

/* 221 */

// B.2.3.3 String.prototype.big()

/* 222 */

// B.2.3.4 String.prototype.blink()

/* 223 */

// B.2.3.5 String.prototype.bold()

/* 224 */

// B.2.3.6 String.prototype.fixed()

/* 225 */

// B.2.3.7 String.prototype.fontcolor(color)

/* 226 */

// B.2.3.8 String.prototype.fontsize(size)

/* 227 */

// B.2.3.9 String.prototype.italics()

/* 228 */

// B.2.3.10 String.prototype.link(url)

/* 229 */

// B.2.3.11 String.prototype.small()

/* 230 */

// B.2.3.12 String.prototype.strike()

/* 231 */

// B.2.3.13 String.prototype.sub()

/* 232 */

// B.2.3.14 String.prototype.sup()

/* 233 */

// 20.3.3.1 / 15.9.4.4 Date.now()

/* 234 */

/* 235 */

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

// PhantomJS / old WebKit has a broken implementations

/* 236 */

/* 237 */

/* 238 */

/* 239 */

/* 240 */

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)

/* 241 */

// 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)

/* , mapfn = undefined, thisArg = undefined */

// if object isn't iterable or it's array with default iterator - use simple case

/* 242 */

// WebKit Array.of isn't generic

// 22.1.2.3 Array.of( ...items)

/* 243 */

// 22.1.3.13 Array.prototype.join(separator)

// fallback for not array-like strings

/* 244 */

// fallback for not array-like ES3 strings and DOM objects

/* 245 */

// IE8-

// V8 bug

// Old WebKit

// 22.1.3.25 Array.prototype.sort(comparefn)

/* 246 */

// 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])

/* 247 */

// cross-realm fallback

/* 248 */

// 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])

/* 249 */

// 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])

/* 250 */

// 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])

/* 251 */

// 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])

/* 252 */

// 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])

/* 253 */

// 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])

/* 254 */

// 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])

/* , fromIndex = 0 */

/* 255 */

// 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])

/* , fromIndex = @[*-1] */

// convert -0 to +0

/* 256 */

/* 257 */

/* 258 */

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

// Shouldn't skip holes

/* 259 */

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

/* 260 */

/* 261 */

// RegExp constructor can alter flags and IsRegExp works correct with @@match

/* 262 */

// 21.2.5.14 RegExp.prototype.toString()

/* 263 */

// @@match logic

// `String.prototype.match` method

// https://tc39.github.io/ecma262/#sec-string.prototype.match

// `RegExp.prototype[@@match]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match

/* 264 */

// @@replace logic

// `String.prototype.replace` method

// https://tc39.github.io/ecma262/#sec-string.prototype.replace

// `RegExp.prototype[@@replace]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace

// NOTE: This is equivalent to

//   captures = result.slice(1).map(maybeToString)

// but for some reason `nativeSlice.call(result, 1, result.length)` (called in

// the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and

// causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

// https://tc39.github.io/ecma262/#sec-getsubstitution

// \d\d?

/* 265 */

// @@search logic

// `String.prototype.search` method

// https://tc39.github.io/ecma262/#sec-string.prototype.search

// `RegExp.prototype[@@search]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search

/* 266 */

// @@split logic

// based on es5-shim implementation, need to rework it

// If `separator` is not a regex, use native split

// Avoid an infinite loop

// `String.prototype.split` method

// https://tc39.github.io/ecma262/#sec-string.prototype.split

// `RegExp.prototype[@@split]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split

// NOTE: This cannot be properly polyfilled in engines that don't support

// the 'y' flag.

/* 267 */

// Node.js

// browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339

// Promise.resolve without an argument throws an error in LG WebOS 2

// strange IE + webpack dev server bug - use .call(global)

/* 268 */

/* 269 */

// 23.1 Map Objects

// 23.1.3.6 Map.prototype.get(key)

// 23.1.3.9 Map.prototype.set(key, value)

/* 270 */

// 23.2 Set Objects

// 23.2.3.1 Set.prototype.add(value)

/* 271 */

// 23.3.3.3 WeakMap.prototype.get(key)

// 23.3.3.5 WeakMap.prototype.set(key, value)

// IE11 WeakMap frozen keys fix

// store frozen objects on internal weakmap shim

// store all the rest on native weakmap

/* 272 */

// 23.4 WeakSet Objects

// 23.4.3.1 WeakSet.prototype.add(value)

/* 273 */

// 24.1.3.1 ArrayBuffer.isView(arg)

// 24.1.4.3 ArrayBuffer.prototype.slice(start, end)

// FF fix

/* 274 */

/* 275 */

/* 276 */

/* 277 */

/* 278 */

/* 279 */

/* 280 */

/* 281 */

/* 282 */

/* 283 */

/* 284 */

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)

// MS Edge argumentsList argument is optional

/* 285 */

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])

/* , newTarget */

// w/o altered newTarget, optimization for 0-4 arguments

// w/o altered newTarget, lot of arguments case

// with altered newTarget, not support built-in constructors

/* 286 */

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false

/* 287 */

// 26.1.4 Reflect.deleteProperty(target, propertyKey)

/* 288 */

// 26.1.5 Reflect.enumerate(target)

// keys

/* 289 */

// 26.1.6 Reflect.get(target, propertyKey [, receiver])

/* , receiver */

/* 290 */

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)

/* 291 */

// 26.1.8 Reflect.getPrototypeOf(target)

/* 292 */

// 26.1.9 Reflect.has(target, propertyKey)

/* 293 */

// 26.1.10 Reflect.isExtensible(target)

/* 294 */

// 26.1.11 Reflect.ownKeys(target)

/* 295 */

// 26.1.12 Reflect.preventExtensions(target)

/* 296 */

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])

/* 297 */

// 26.1.14 Reflect.setPrototypeOf(target, proto)

/* 298 */

/* 299 */

// https://github.com/tc39/Array.prototype.includes

/* 300 */

/* 301 */

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap

/* 302 */

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

/* 303 */

/* 304 */

/* , fillString = ' ' */

/* 305 */

/* 306 */

/* 307 */

/* 308 */

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim

/* 309 */

/* 310 */

/* 311 */

/* 312 */

/* 313 */

/* 314 */

// https://github.com/tc39/proposal-object-getownpropertydescriptors

/* 315 */

/* 316 */

// https://github.com/tc39/proposal-object-values-entries

/* 317 */

/* 318 */

/* 319 */

/* 320 */

// https://github.com/tc39/proposal-promise-finally

/* 321 */

/* 322 */

// ie9- setTimeout & setInterval additional parameters fix

/* 323 */

/* 324 */

// TODO: Not spec compliant, should be false.

/* 325 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.

// The ._invoke method unifies the implementations of the .next,

// .throw, and .return methods.

// Be forgiving, per 25.3.3.3.3 of the spec:

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// Setting context._sent for legacy support of Babel's

// function.sent implementation.

// If an exception is thrown from innerFn, we leave state ===

// GenStateExecuting and loop back for another invocation.

// Dispatch the exception by looping back around to the

// context.dispatchException(context.arg) call above.

// Call delegate.iterator[context.method](context.arg) and handle the

// result, either by returning a { value, done } result from the

// delegate iterator, or by modifying context.method and context.arg,

// setting context.delegate to null, and returning the ContinueSentinel.

// Try/catch helper to minimize deoptimizations. Returns a completion

// record like context.tryEntries[i].completion. This interface could

// have been (and was previously) designed to take a closure to be

// invoked without arguments, but in all the cases we care about we

// already have an existing method we want to call, so there's no need

// to create a new function object. We can even get away with assuming

// the method takes exactly one argument, since that happens to be true

// in every case, so we don't have to touch the arguments object. The

// only additional allocation required is the completion record, which

// has a stable shape and so hopefully should be cheap to allocate.

// Dummy constructor functions that we use as the .constructor and

// .constructor.prototype properties for functions that return Generator

// objects. For full spec compliance, you may wish to configure your

// minifier not to mangle the names of these two functions.

// This is a polyfill for %IteratorPrototype% for environments that

// don't natively support it.

// This environment has a native %IteratorPrototype%; use it instead

// of the polyfill.

// Helper for defining the .next, .throw, and .return methods of the

// Iterator interface in terms of a single ._invoke method.

// Define the unified helper method that is used to implement .next,

// .throw, and .return (see defineIteratorMethods).

// When a yielded Promise is resolved, its final value becomes

// the .value of the Promise<{value,done}> result for the

// current iteration.

// If a rejected Promise was yielded, throw the rejection back

// into the async generator function so it can be handled there.

// If enqueue has been called before, then we want to wait until

// all previous Promises have been resolved before calling invoke,

// so that results are always delivered in the correct order. If

// enqueue has not been called before, then it is important to

// call invoke immediately, without waiting on a callback to fire,

// so that the async generator function has the opportunity to do

// any necessary setup in a predictable way. This predictability

// is why the Promise constructor synchronously invokes its

// executor callback, and why async functions synchronously

// execute code before the first await. Since we implement simple

// async functions in terms of async generators, it is especially

// important to get this right, even though it requires care.

// Avoid propagating failures to Promises returned by later

// invocations of the iterator.

// A .throw or .return when the delegate iterator has no .throw

// method always terminates the yield* loop.

// Note: ["return"] must be used for ES3 parsing compatibility.

// If the delegate iterator has a return method, give it a

// chance to clean up.

// If maybeInvokeDelegate(context) changed context.method from

// "return" to "throw", let that override the TypeError below.

// Assign the result of the finished delegate to the temporary

// variable specified by delegate.resultName (see delegateYield).

// Resume execution at the desired location (see delegateYield).

// If context.method was "throw" but the delegate handled the

// exception, let the outer generator proceed normally. If

// context.method was "next", forget context.arg since it has been

// "consumed" by the delegate iterator. If context.method was

// "return", allow the original .return call to continue in the

// outer generator.

// The delegate iterator is finished, so forget it and continue with

// the outer generator.

// Define Generator.prototype.{next,throw,return} in terms of the

// unified ._invoke helper method.

// The root entry object (effectively a try statement without a catch

// or a finally block) gives us a place to store values thrown from

// locations where there is no enclosing try statement.

// Return an iterator with no values.

// Regardless of whether this script is executing as a CommonJS module

// or not, return the runtime object so that we can declare the variable

// regeneratorRuntime in the outer scope, which allows this module to be

// injected easily by `bin/regenerator --include-runtime script.js`.

// For the native GeneratorFunction constructor, the best we can

// do is to check its .name property.

// Within the body of any async function, `await x` is transformed to

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// `hasOwn.call(value, "__await")` to determine if the yielded value is

// meant to be awaited.

// Note that simple async functions are implemented on top of

// AsyncIterator objects; they just return a Promise for the value of

// the final result produced by the iterator.

// A Generator should always return itself as the iterator object when the

// @@iterator function is called on it. Some browsers' implementations of the

// iterator prototype chain incorrectly implement this, causing the Generator

// object to not be returned from this call. This ensures that doesn't happen.

// See https://github.com/facebook/regenerator/issues/274 for more details.

// Rather than returning an object with a next method, we keep

// things simple and return the next function itself.

// To avoid creating an additional object, we just hang the .value

// and .done properties off the next function object itself. This

// also ensures that the minifier will not anonymize the function.

// Resetting context._sent for legacy support of Babel's

// Not sure about the optimal order of these conditions:

// If the dispatched exception was caught by a catch block,

// then let that catch block handle the exception normally.

// Exception thrown outside of any try block that could handle

// it, so set the completion value of the entire function to

// throw the exception.

// Ignore the finally entry if control is not jumping to a

// location outside the try/catch block.

// The context.catch method must only be called with a location

// argument that corresponds to a known catch block.

// Deliberately forget the last sent value so that we don't

// accidentally pass it on to the delegate.

// If this script is executing as a CommonJS module, use module.exports

// as the regeneratorRuntime namespace. Otherwise create a new empty

// object. Either way, the resulting object will be used to initialize

// the regeneratorRuntime variable at the top of this file.

// This module should not be running in strict mode, so the above

// assignment should always work unless something is misconfigured. Just

// in case runtime.js accidentally runs in strict mode, we can escape

// strict mode using a global Function call. This could conceivably fail

// if a Content Security Policy forbids using Function, but in that case

// the proper solution is to fix the accidental strict mode problem. If

// you've misconfigured your bundler to force strict mode and applied a

// CSP to forbid Function, and you're not willing to fix either of those

// problems, please detail your unique predicament in a GitHub issue.

/* 326 */

/* 327 */

// https://github.com/tc39/proposal-global

/* 328 */

// prevent global pollution for namespaces

// make static versions for prototype methods

// export proto methods to core.%CONSTRUCTOR%.methods.%NAME%

// export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%

/* 329 */

/* 330 */

/* 331 */

/* 332 */

/* 333 */

/* 334 */

/* 335 */

/* 336 */

/* 337 */

/* 338 */

/* 339 */

/* 340 */

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */

// Copy axios.prototype to instance

// Copy context to instance

// Create the default instance to be exported

// Expose Axios class to allow class inheritance

// Factory for creating new instances

// Expose Cancel & CancelToken

// Expose all/spread

// Allow use of default import syntax in TypeScript

/* 341 */

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */

// Allow for axios('example/url'[, config]) a la fetch API

// Set config.method

// Hook up interceptors middleware

// Provide aliases for supported request methods

/*eslint func-names:0*/

/* 342 */

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */

/* 343 */

/**
 * Throws a `Cancel` if cancellation has been requested.
 */

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */

// Ensure headers exist

// Transform request data

// Flatten headers

// Transform response data

/* 344 */

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */

/* 345 */

/* 346 */

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */

/* 347 */

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

// Standard

// Microsoft

// Mozilla

// Axios

/* 348 */

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */

/* 349 */

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

// A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).

// RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed

// by any combination of letters, digits, plus, period, or hyphen.

/* 350 */

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

/* 351 */

// Headers whose duplicates are ignored by node

// c.f. https://nodejs.org/api/http.html#http_message_headers

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

/* 352 */

// Standard browser envs have full support of the APIs needed to test

// whether the request URL is of the same origin as current location.

/**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */

// urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

// IE needs attribute set twice to normalize properties

/**
  * Determine if a URL shares the same origin as the current location
  *
  * @param {String} requestURL The URL to test
  * @returns {boolean} True if URL shares the same origin, otherwise false
  */

/* 353 */

/* 354 */

/* 355 */

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */

/* 356 */

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

/* 357 */

// set events hash

// set listeners array

// only add once

// add event

// set once flag

// set onceEvents hash

// set onceListeners object

// set flag

// copy over to avoid interference if .off() in listener

// once stuff

// remove listener

// remove before trigger to prevent recursion

// unset once flag

// trigger listener

/* 358 */

/*!
 * Font Awesome Free 5.12.0 by @fontawesome - https://fontawesome.com
 * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
 */

// Getting an empty string will occur if the attribute is set on the HTML tag but without a value

// We'll assume that this is an indication that it should be toggled to true

// For example <script data-search-pseudo-elements src="..."></script>

// run promise callbacks

// reset async asyncQueue

// then should be retrieved only once

/**
   * @class
   */

// already resolved, call callback async

// subscribe

/**
     * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction
     * of new styles we needed to differentiate between them. Prefix `fa` is now an alias
     * for `fas` so we'll easy the upgrade process for our users by automatically defining
     * this as well.
     */

// If we already have a replaced node we do not want to continue nesting within it.

// Short-circuit to the standard replacement

// noop

// This node is already being processed

// If we've already processed it but the current computed style does not result in a font-family,

// that probably means that a class name that was previously present to make the icon has been

// removed. So we now should delete the icon.

// Only convert the pseudo element in this :before/:after position into an icon if we haven't

// already done so with the same prefix and iconName

// Delete the old one, since we're replacing it with a new one

/* 359 */

// DOM APIs, for completeness

// Does not start the time, just sets up the members needed.

// setimmediate attaches itself to the global object

// On some exotic environments, it's not clear which object `setimmediate` was

// able to install onto.  Search each possibility in the same order as the

// `setimmediate` library.

/* 360 */

// Spec says greater than zero

// Don't get fooled by e.g. browserify environments.

// The test against `importScripts` prevents this implementation from being installed inside a web worker,

// where `global.postMessage` means something completely different and can't be used for this purpose.

// For web workers, where supported

// For IE 6–8

// Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted

// into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.

// For non-IE10 modern browsers

// Callback can either be a function or a string

// Copy function arguments

// Store and register the task

// From the spec: "Wait until any invocations of this algorithm started before this one have completed."

// So if we're currently running a task, we'll need to delay this invocation.

// Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a

// "too much recursion" error.

/* 361 */

/* 362 */

/* 363 */

/* 364 */

/*!
  * Bootstrap v4.4.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */

/**
   * --------------------------------------------------------------------------
   * Public Util Api
   * --------------------------------------------------------------------------
   */

// eslint-disable-next-line no-bitwise

// "~~" acts like a faster Math.floor() here

// Get transition-duration of the element

// Return 0 if element or transition duration is not found

// If multiple durations are defined, take the first

// TODO: Remove in v5

// Shoutout AngusCroll (https://goo.gl/pxwQGp)

// Can find the shadow root otherwise it'll return the document

// when we don't find a shadow root

// eslint-disable-line prefer-rest-params

/**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

// Getters

// Public

// Private

// Static

/**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */

/**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

// if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input

// work around Firefox bug #1540995

// ensure correct active class is set to match the controls' actual values/states

// find all checkboxes/readio buttons inside data-toggle groups

// find all button toggles

// Don't call next when the page isn't visible

// or the carousel or its parent isn't visible

// swipe left

// swipe right

// If it's a touch-enabled device, mouseenter/leave are fired as

// part of the mouse compatibility events on first tap - the carousel

// would stop cycling until user tapped out of it;

// here, we listen for touchend, explicitly pause the carousel

// (as if it's the second time we tap on it, mouseenter compat event

// is NOT fired) and after a timeout (to allow for mouse compatibility

// events to fire) we explicitly restart cycling

// ensure swiping with one touch and not pinching

// Coerce string values

// It's a jQuery object

// preventDefault only for <a> elements (which change the URL) not inside the collapsible element

// Disable totally Popper.js for Dropdown in Navbar

/**
         * Check for Popper dependency
         * Popper - https://popper.js.org
         */

// Check if it's jQuery element

// If boundary is not `scrollParent`, then set position to `static`

// to allow the menu to "escape" the scroll parent's boundaries

// https://github.com/twbs/bootstrap/issues/24251

// If this is a touch-enabled device we add extra

// empty mouseover listeners to the body's immediate children;

// only needed because of broken event delegation on iOS

// https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

// Handle dropup

// Disable Popper.js if we have a static display

// If this is a touch-enabled device we remove the extra

// empty mouseover listeners we added for iOS support

// eslint-disable-next-line complexity

// If not input/textarea:

//  - And not a key in REGEXP_KEYDOWN => not a dropdown command

// If input/textarea:

//  - If space key => not a dropdown command

//  - If key is other than escape

//    - If key is not up or down => not a dropdown command

//    - If trigger inside the menu => not a dropdown command

// Up

// Down

/**
       * `document` has 2 events `Event.FOCUSIN` and `Event.CLICK_DATA_API`
       * Do not move `document` in `htmlElements` array
       * It will remove `Event.CLICK_DATA_API` event that should remain
       */

// Don't move modal's DOM position

// ----------------------------------------------------------------------

// the following methods are used to handle overflowing modals

// todo (fat): these should probably be refactored out of modal.js

// Note: DOMNode.style.paddingRight returns the actual value or '' if not set

//   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set

// Adjust fixed content padding

// Adjust sticky content margin

// Adjust body padding

// Restore fixed content padding

// Restore sticky content

// Restore body padding

// thx d.walsh

/**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.4.1): tools/sanitizer.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */

// Global attributes allowed on any supplied element below.

// Check if a regular expression validates the attribute.

// private

// Protected

// Content is a DOM node or a jQuery

/**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.4.1): util.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */

/**
   * ------------------------------------------------------------------------
   * Private TransitionEnd Helpers
   * ------------------------------------------------------------------------
   */

// Overrides

// We use append for html objects to maintain js events

// TODO (fat): remove sketch reliance on jQuery position/offset

// Set triggered link as active

// Set triggered links parents as active

// With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

// Handle special case when .nav-link is inside .nav-item
